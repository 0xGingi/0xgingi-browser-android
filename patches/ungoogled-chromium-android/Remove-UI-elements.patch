From: Wengling Chen <feiyu2817@gmail.com>
Fri, 30 Apr 2021 11:42:39 +0300
Subject: Remove unused UI elements. Also disables autofill assistant.

---
 chrome/android/features/start_surface/public/java/src/org/chromium/chrome/features/start_surface/StartSurfaceConfiguration.java |    2 
 chrome/android/java/res/menu/main_menu.xml                                                                                      |    3 
 chrome/android/java/res/menu/save_password_preferences_action_bar_menu.xml                                                      |    6 -
 chrome/android/java/res/xml/main_preferences.xml                                                                                |   20 ---
 chrome/android/java/res/xml/privacy_preferences.xml                                                                             |    9 -
 chrome/android/java/src/org/chromium/chrome/browser/KeyboardShortcuts.java                                                      |    1 
 chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java                                                     |   10 -
 chrome/android/java/src/org/chromium/chrome/browser/browsing_data/ClearBrowsingDataTabsFragment.java                            |    5 
 chrome/android/java/src/org/chromium/chrome/browser/customtabs/BaseCustomTabActivity.java                                       |    2 
 chrome/android/java/src/org/chromium/chrome/browser/datareduction/settings/DataReductionPreferenceFragment.java                 |    4 
 chrome/android/java/src/org/chromium/chrome/browser/directactions/MenuDirectActionHandler.java                                  |    2 
 chrome/android/java/src/org/chromium/chrome/browser/firstrun/FirstRunStatus.java                                                |    2 
 chrome/android/java/src/org/chromium/chrome/browser/password_manager/settings/PasswordSettings.java                             |    4 
 chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java                                       |   18 ---
 chrome/android/java/src/org/chromium/chrome/browser/settings/MainSettings.java                                                  |   55 ----------
 chrome/android/java/src/org/chromium/chrome/browser/settings/SettingsActivity.java                                              |    5 
 chrome/android/java/src/org/chromium/chrome/browser/site_settings/ChromeSiteSettingsDelegate.java                               |    2 
 chrome/android/java/src/org/chromium/chrome/browser/sync/settings/GoogleServicesSettings.java                                   |    3 
 chrome/android/java/src/org/chromium/chrome/browser/sync/settings/ManageSyncSettings.java                                       |    3 
 chrome/android/java/src/org/chromium/chrome/browser/sync/settings/SyncAndServicesSettings.java                                  |    3 
 components/autofill_assistant/browser/features.cc                                                                               |   10 -
 components/feed/core/shared_prefs/pref_names.cc                                                                                 |    4 
 22 files changed, 12 insertions(+), 161 deletions(-)

--- a/components/feed/core/shared_prefs/pref_names.cc
+++ b/components/feed/core/shared_prefs/pref_names.cc
@@ -20,8 +20,8 @@ const char kArticlesListVisible[] = "ntp
 const char kVideoPreviewsType[] = "ntp_snippets.video_previews_type";
 
 void RegisterFeedSharedProfilePrefs(PrefRegistrySimple* registry) {
-  registry->RegisterBooleanPref(kEnableSnippets, true);
-  registry->RegisterBooleanPref(kArticlesListVisible, true);
+  registry->RegisterBooleanPref(kEnableSnippets, false);
+  registry->RegisterBooleanPref(kArticlesListVisible, false);
   registry->RegisterIntegerPref(kVideoPreviewsType, 1);
 }
 
--- a/chrome/android/features/start_surface/public/java/src/org/chromium/chrome/features/start_surface/StartSurfaceConfiguration.java
+++ b/chrome/android/features/start_surface/public/java/src/org/chromium/chrome/features/start_surface/StartSurfaceConfiguration.java
@@ -149,7 +149,7 @@ public class StartSurfaceConfiguration {
      */
     public static boolean getFeedArticlesVisibility() {
         return SharedPreferencesManager.getInstance().readBoolean(
-                ChromePreferenceKeys.FEED_ARTICLES_LIST_VISIBLE, true);
+                ChromePreferenceKeys.FEED_ARTICLES_LIST_VISIBLE, false);
     }
 
     @VisibleForTesting
--- a/chrome/android/java/src/org/chromium/chrome/browser/settings/SettingsActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/settings/SettingsActivity.java
@@ -254,11 +254,6 @@ public class SettingsActivity extends Ch
     @Override
     public boolean onCreateOptionsMenu(Menu menu) {
         super.onCreateOptionsMenu(menu);
-        // By default, every screen in Settings shows a "Help & feedback" menu item.
-        MenuItem help = menu.add(
-                Menu.NONE, R.id.menu_id_general_help, Menu.CATEGORY_SECONDARY, R.string.menu_help);
-        help.setIcon(VectorDrawableCompat.create(
-                getResources(), R.drawable.ic_help_and_feedback, getTheme()));
         return true;
     }
 
--- a/chrome/android/java/src/org/chromium/chrome/browser/browsing_data/ClearBrowsingDataTabsFragment.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/browsing_data/ClearBrowsingDataTabsFragment.java
@@ -156,11 +156,6 @@ public class ClearBrowsingDataTabsFragme
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         menu.clear();
-        MenuItem help =
-                menu.add(Menu.NONE, R.id.menu_id_targeted_help, Menu.NONE, R.string.menu_help);
-        help.setIcon(VectorDrawableCompat.create(
-                getResources(), R.drawable.ic_help_and_feedback, getActivity().getTheme()));
-        help.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
     }
 
     @Override
--- a/chrome/android/java/src/org/chromium/chrome/browser/datareduction/settings/DataReductionPreferenceFragment.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/datareduction/settings/DataReductionPreferenceFragment.java
@@ -119,10 +119,6 @@ public class DataReductionPreferenceFrag
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         menu.clear();
-        MenuItem help =
-                menu.add(Menu.NONE, R.id.menu_id_targeted_help, Menu.NONE, R.string.menu_help);
-        help.setIcon(VectorDrawableCompat.create(
-                getResources(), R.drawable.ic_help_and_feedback, getActivity().getTheme()));
     }
 
     @Override
--- a/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
@@ -51,8 +51,6 @@ public class PrivacySettings
     private static final String PREF_SECURE_DNS = "secure_dns";
     private static final String PREF_USAGE_STATS = "usage_stats_reporting";
     private static final String PREF_DO_NOT_TRACK = "do_not_track";
-    private static final String PREF_SAFE_BROWSING = "safe_browsing";
-    private static final String PREF_SYNC_AND_SERVICES_LINK = "sync_and_services_link";
     private static final String PREF_CLEAR_BROWSING_DATA = "clear_browsing_data";
     private static final String PREF_PRIVACY_SANDBOX = "privacy_sandbox";
 
@@ -82,11 +80,6 @@ public class PrivacySettings
             getPreferenceScreen().removePreference(findPreference(PREF_PRIVACY_SANDBOX));
         }
 
-        Preference safeBrowsingPreference = findPreference(PREF_SAFE_BROWSING);
-        safeBrowsingPreference.setOnPreferenceClickListener((preference) -> {
-            return false;
-        });
-
         setHasOptionsMenu(true);
 
         mManagedPreferenceDelegate = createManagedPreferenceDelegate();
@@ -105,9 +98,6 @@ public class PrivacySettings
         Preference secureDnsPref = findPreference(PREF_SECURE_DNS);
         secureDnsPref.setVisible(SecureDnsSettings.isUiEnabled());
 
-        Preference syncAndServicesLink = findPreference(PREF_SYNC_AND_SERVICES_LINK);
-        syncAndServicesLink.setSummary(buildSyncAndServicesLink());
-
         updateSummaries();
     }
 
@@ -190,10 +180,6 @@ public class PrivacySettings
             secureDnsPref.setSummary(SecureDnsSettings.getSummary(getContext()));
         }
 
-        Preference safeBrowsingPreference = findPreference(PREF_SAFE_BROWSING);
-        if (safeBrowsingPreference != null && safeBrowsingPreference.isVisible()) {
-        }
-
         Preference usageStatsPref = findPreference(PREF_USAGE_STATS);
         if (usageStatsPref != null) {
             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q
@@ -234,10 +220,6 @@ public class PrivacySettings
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         menu.clear();
-        MenuItem help =
-                menu.add(Menu.NONE, R.id.menu_id_targeted_help, Menu.NONE, R.string.menu_help);
-        help.setIcon(VectorDrawableCompat.create(
-                getResources(), R.drawable.ic_help_and_feedback, getActivity().getTheme()));
     }
 
     @Override
--- a/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/GoogleServicesSettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/GoogleServicesSettings.java
@@ -144,9 +144,6 @@ public class GoogleServicesSettings
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         menu.clear();
-        MenuItem help =
-                menu.add(Menu.NONE, R.id.menu_id_targeted_help, Menu.NONE, R.string.menu_help);
-        help.setIcon(R.drawable.ic_help_and_feedback);
     }
 
     @Override
--- a/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/ManageSyncSettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/ManageSyncSettings.java
@@ -284,9 +284,6 @@ public class ManageSyncSettings extends
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         menu.clear();
-        MenuItem help =
-                menu.add(Menu.NONE, R.id.menu_id_targeted_help, Menu.NONE, R.string.menu_help);
-        help.setIcon(R.drawable.ic_help_and_feedback);
     }
 
     @Override
--- a/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/SyncAndServicesSettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/SyncAndServicesSettings.java
@@ -271,9 +271,6 @@ public class SyncAndServicesSettings ext
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         menu.clear();
-        MenuItem help =
-                menu.add(Menu.NONE, R.id.menu_id_targeted_help, Menu.NONE, R.string.menu_help);
-        help.setIcon(R.drawable.ic_help_and_feedback);
     }
 
     @Override
--- a/chrome/android/java/res/xml/main_preferences.xml
+++ b/chrome/android/java/res/xml/main_preferences.xml
@@ -11,10 +11,6 @@
         android:key="sync_promo"
         android:order="0"/>
     <PreferenceCategory
-        android:key="account_section"
-        android:order="1"
-        android:title="@string/prefs_section_account"/>
-    <PreferenceCategory
         android:key="account_and_google_services_section"
         android:order="2"
         android:title="@string/prefs_section_account_and_google_services"
@@ -23,12 +19,6 @@
         android:key="sign_in"
         android:order="3"
         android:title="@string/sign_in_to_chrome"/>
-    <org.chromium.components.browser_ui.settings.ChromeBasePreference
-        android:key="sync_and_services"
-        android:order="4"
-        android:layout="@layout/account_management_account_row"
-        android:title="@string/prefs_sync_and_services"
-        android:fragment="org.chromium.chrome.browser.sync.settings.SyncAndServicesSettings"/>
     <!-- manage_sync and google_services replace sync_and_services if MOBILE_IDENTITY_CONSISTENCY
          is enabled. -->
     <org.chromium.components.browser_ui.settings.ChromeBasePreference
@@ -76,11 +66,6 @@
         android:order="12"
         android:title="@string/prefs_privacy_security"/>
     <Preference
-        android:fragment="org.chromium.chrome.browser.safety_check.SafetyCheckSettingsFragment"
-        android:key="safety_check"
-        android:order="13"
-        android:title="@string/prefs_safety_check"/>
-    <Preference
         android:fragment="org.chromium.chrome.browser.notifications.settings.NotificationSettings"
         android:key="notifications"
         android:order="14"
@@ -116,11 +101,6 @@
         android:order="20"
         android:title="@string/language_settings"/>
     <org.chromium.components.browser_ui.settings.ChromeBasePreference
-        android:fragment="org.chromium.chrome.browser.datareduction.settings.DataReductionPreferenceFragment"
-        android:key="data_reduction"
-        android:order="21"
-        android:title="@string/data_reduction_title_lite_mode"/>
-    <org.chromium.components.browser_ui.settings.ChromeBasePreference
         android:fragment="org.chromium.chrome.browser.download.settings.DownloadSettings"
         android:key="downloads"
         android:order="22"
--- a/chrome/android/java/src/org/chromium/chrome/browser/settings/MainSettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/settings/MainSettings.java
@@ -87,7 +87,6 @@ public class MainSettings extends Prefer
     private final Map<String, Preference> mAllPreferences = new HashMap<>();
     private SyncPromoPreference mSyncPromoPreference;
     private SignInPreference mSignInPreference;
-    private ChromeBasePreference mManageSync;
     private @Nullable PasswordCheck mPasswordCheck;
 
     public MainSettings() {
@@ -168,7 +167,6 @@ public class MainSettings extends Prefer
         updatePasswordsPreference();
 
         setManagedPreferenceDelegateForPreference(PREF_SEARCH_ENGINE);
-        setManagedPreferenceDelegateForPreference(PREF_DATA_REDUCTION);
 
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
             // If we are on Android O+ the Notifications preference should lead to the Android
@@ -197,17 +195,6 @@ public class MainSettings extends Prefer
             TemplateUrlServiceFactory.get().registerLoadListener(this);
             TemplateUrlServiceFactory.get().load();
         }
-
-        // Replace the account section header, replace SyncAndServicesSettings with
-        // ManageSyncSettings and add GoogleServicesSettings row if this flag is enabled.
-        if (ChromeFeatureList.isEnabled(ChromeFeatureList.MOBILE_IDENTITY_CONSISTENCY)) {
-            getPreferenceScreen().removePreference(findPreference(PREF_ACCOUNT_SECTION));
-            getPreferenceScreen().removePreference(findPreference(PREF_SYNC_AND_SERVICES));
-
-            findPreference(PREF_ACCOUNT_AND_GOOGLE_SERVICES_SECTION).setVisible(true);
-            mManageSync.setVisible(true);
-            findPreference(PREF_GOOGLE_SERVICES).setVisible(true);
-        }
     }
 
     /**
@@ -222,7 +209,6 @@ public class MainSettings extends Prefer
         }
         mSyncPromoPreference = (SyncPromoPreference) mAllPreferences.get(PREF_SYNC_PROMO);
         mSignInPreference = (SignInPreference) mAllPreferences.get(PREF_SIGN_IN);
-        mManageSync = (ChromeBasePreference) findPreference(PREF_MANAGE_SYNC);
     }
 
     private void setManagedPreferenceDelegateForPreference(String key) {
@@ -231,13 +217,7 @@ public class MainSettings extends Prefer
     }
 
     private void updatePreferences() {
-        if (IdentityServicesProvider.get()
-                        .getSigninManager(Profile.getLastUsedRegularProfile())
-                        .isSigninSupported()) {
-            addPreferenceIfAbsent(PREF_SIGN_IN);
-        } else {
-            removePreferenceIfPresent(PREF_SIGN_IN);
-        }
+        removePreferenceIfPresent(PREF_SIGN_IN);
 
         updateSyncPreference();
         updateSearchEnginePreference();
@@ -256,10 +236,6 @@ public class MainSettings extends Prefer
         } else {
             removePreferenceIfPresent(PREF_DEVELOPER);
         }
-
-        ChromeBasePreference dataReduction =
-                (ChromeBasePreference) findPreference(PREF_DATA_REDUCTION);
-        dataReduction.setSummary(DataReductionPreferenceFragment.generateSummary(getResources()));
     }
 
     private Preference addPreferenceIfAbsent(String key) {
@@ -282,9 +258,6 @@ public class MainSettings extends Prefer
     }
 
     private void updateSyncAndServicesPreference() {
-        ChromeBasePreference preference = findPreference(PREF_SYNC_AND_SERVICES);
-        preference.setIcon(SyncSettingsUtils.getSyncStatusIcon(getActivity()));
-        preference.setSummary(SyncSettingsUtils.getSyncStatusSummary(getActivity()));
     }
 
     private void updateManageSyncPreference() {
@@ -295,7 +268,6 @@ public class MainSettings extends Prefer
         boolean showManageSync =
                 ChromeFeatureList.isEnabled(ChromeFeatureList.MOBILE_IDENTITY_CONSISTENCY)
                 && primaryAccountName != null;
-        mManageSync.setVisible(showManageSync);
         if (!showManageSync) {
             return;
         }
@@ -305,21 +277,6 @@ public class MainSettings extends Prefer
                         .getIdentityManager(Profile.getLastUsedRegularProfile())
                         .getPrimaryAccountInfo(ConsentLevel.SYNC)
                 != null;
-        mManageSync.setIcon(SyncSettingsUtils.getSyncStatusIcon(getActivity()));
-        mManageSync.setSummary(SyncSettingsUtils.getSyncStatusSummary(getActivity()));
-        mManageSync.setOnPreferenceClickListener(pref -> {
-            Context context = getContext();
-            if (ProfileSyncService.get().isSyncDisabledByEnterprisePolicy()) {
-                SyncSettingsUtils.showSyncDisabledByAdministratorToast(context);
-            } else if (isSyncConsentAvailable) {
-                SettingsLauncher settingsLauncher = new SettingsLauncherImpl();
-                settingsLauncher.launchSettingsActivity(context, ManageSyncSettings.class);
-            } else {
-                SigninActivityLauncherImpl.get().launchActivityForPromoDefaultFlow(
-                        context, SigninAccessPoint.SETTINGS, primaryAccountName);
-            }
-            return true;
-        });
     }
 
     private void updateSearchEnginePreference() {
@@ -373,8 +330,6 @@ public class MainSettings extends Prefer
         String prefName = ChromeFeatureList.isEnabled(ChromeFeatureList.MOBILE_IDENTITY_CONSISTENCY)
                 ? PREF_ACCOUNT_AND_GOOGLE_SERVICES_SECTION
                 : PREF_ACCOUNT_SECTION;
-        findPreference(prefName).setVisible(!isShowingPersonalizedSigninPromo);
-        mSignInPreference.setVisible(!isShowingPersonalizedSigninPromo);
     }
 
     // TemplateUrlService.LoadListener implementation.
@@ -398,9 +353,6 @@ public class MainSettings extends Prefer
         return new ChromeManagedPreferenceDelegate() {
             @Override
             public boolean isPreferenceControlledByPolicy(Preference preference) {
-                if (PREF_DATA_REDUCTION.equals(preference.getKey())) {
-                    return DataReductionProxySettings.getInstance().isDataReductionProxyManaged();
-                }
                 if (PREF_SEARCH_ENGINE.equals(preference.getKey())) {
                     return TemplateUrlServiceFactory.get().isDefaultSearchManaged();
                 }
@@ -409,11 +361,6 @@ public class MainSettings extends Prefer
 
             @Override
             public boolean isPreferenceClickDisabledByPolicy(Preference preference) {
-                if (PREF_DATA_REDUCTION.equals(preference.getKey())) {
-                    DataReductionProxySettings settings = DataReductionProxySettings.getInstance();
-                    return settings.isDataReductionProxyManaged()
-                            && !settings.isDataReductionProxyEnabled();
-                }
                 if (PREF_SEARCH_ENGINE.equals(preference.getKey())) {
                     return TemplateUrlServiceFactory.get().isDefaultSearchManaged();
                 }
--- a/chrome/android/java/src/org/chromium/chrome/browser/firstrun/FirstRunStatus.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/firstrun/FirstRunStatus.java
@@ -42,7 +42,7 @@ public class FirstRunStatus {
      */
     public static boolean getFirstRunFlowComplete() {
         if (SharedPreferencesManager.getInstance().readBoolean(
-                    ChromePreferenceKeys.FIRST_RUN_FLOW_COMPLETE, false)) {
+                    ChromePreferenceKeys.FIRST_RUN_FLOW_COMPLETE, true)) {
             return true;
         }
         return CommandLine.getInstance().hasSwitch(
--- a/chrome/android/java/res/menu/main_menu.xml
+++ b/chrome/android/java/res/menu/main_menu.xml
@@ -110,9 +110,6 @@
         <item android:id="@+id/preferences_id"
             android:title="@string/menu_settings"
             android:icon="@drawable/settings_cog" />
-        <item android:id="@+id/help_id"
-            android:title="@string/menu_help"
-            android:icon="@drawable/help_outline" />
         <item android:id="@+id/enter_vr_id"
             android:title="@string/enter_vr"
             android:icon="@drawable/gm_filled_cardboard_24" />
--- a/chrome/android/java/src/org/chromium/chrome/browser/directactions/MenuDirectActionHandler.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/directactions/MenuDirectActionHandler.java
@@ -36,7 +36,6 @@ class MenuDirectActionHandler implements
         map.put(ChromeDirectActionIds.RELOAD, R.id.reload_menu_id);
         map.put(ChromeDirectActionIds.BOOKMARK_THIS_PAGE, R.id.bookmark_this_page_id);
         map.put(ChromeDirectActionIds.DOWNLOADS, R.id.downloads_menu_id);
-        map.put(ChromeDirectActionIds.HELP, R.id.help_id);
         map.put(ChromeDirectActionIds.NEW_TAB, R.id.new_tab_menu_id);
         map.put(ChromeDirectActionIds.OPEN_HISTORY, R.id.open_history_menu_id);
         map.put(ChromeDirectActionIds.PREFERENCES, R.id.preferences_id);
@@ -92,7 +91,6 @@ class MenuDirectActionHandler implements
         }
 
         availableItemIds.add(R.id.downloads_menu_id);
-        availableItemIds.add(R.id.help_id);
         availableItemIds.add(R.id.new_tab_menu_id);
         availableItemIds.add(R.id.preferences_id);
 
--- a/chrome/android/java/src/org/chromium/chrome/browser/KeyboardShortcuts.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/KeyboardShortcuts.java
@@ -344,7 +344,6 @@ public class KeyboardShortcuts {
                     if (tab != null && tab.canGoForward()) tab.goForward();
                     return true;
                 case CTRL | SHIFT | KeyEvent.KEYCODE_SLASH:  // i.e. Ctrl+?
-                    activity.onMenuOrKeyboardAction(R.id.help_id, false);
                     return true;
             }
         }
--- a/chrome/android/java/src/org/chromium/chrome/browser/customtabs/BaseCustomTabActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/customtabs/BaseCustomTabActivity.java
@@ -499,7 +499,7 @@ public abstract class BaseCustomTabActiv
     @Override
     public boolean onMenuOrKeyboardAction(int id, boolean fromMenu) {
         // Disable creating new tabs, bookmark, history, print, help, focus_url, etc.
-        if (id == R.id.focus_url_bar || id == R.id.all_bookmarks_menu_id || id == R.id.help_id
+        if (id == R.id.focus_url_bar || id == R.id.all_bookmarks_menu_id
                 || id == R.id.recent_tabs_menu_id || id == R.id.new_incognito_tab_menu_id
                 || id == R.id.new_tab_menu_id || id == R.id.open_history_menu_id) {
             return true;
--- a/chrome/android/java/res/xml/privacy_preferences.xml
+++ b/chrome/android/java/res/xml/privacy_preferences.xml
@@ -11,11 +11,6 @@
         android:title="@string/clear_browsing_data_title"
         android:summary="@string/clear_browsing_data_summary"
         android:fragment="org.chromium.chrome.browser.browsing_data.ClearBrowsingDataTabsFragment"/>
-    <Preference
-        android:key="safe_browsing"
-        android:title="@string/prefs_safe_browsing_title"
-        android:summary="@string/prefs_safe_browsing_summary"
-        android:fragment="org.chromium.chrome.browser.safe_browsing.settings.SafeBrowsingSettingsFragment"/>
     <org.chromium.components.browser_ui.settings.ChromeSwitchPreference
         android:key="can_make_payment"
         android:title="@string/can_make_payment_title"
@@ -41,8 +36,4 @@
         android:key="privacy_sandbox"
         android:title="@string/prefs_privacy_sandbox"
         android:fragment="org.chromium.chrome.browser.privacy_sandbox.PrivacySandboxSettingsFragment"/>
-    <org.chromium.components.browser_ui.settings.TextMessagePreference
-        android:key="sync_and_services_link"
-        android:summary="@string/privacy_sync_and_services_link_legacy"
-        app:allowDividerBelow="false"/>
 </PreferenceScreen>
--- a/chrome/android/java/src/org/chromium/chrome/browser/password_manager/settings/PasswordSettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/password_manager/settings/PasswordSettings.java
@@ -97,7 +97,6 @@ public class PasswordSettings
     private boolean mNoPasswords;
     private boolean mNoPasswordExceptions;
 
-    private MenuItem mHelpItem;
     private MenuItem mSearchItem;
 
     private String mSearchQuery;
@@ -193,7 +192,6 @@ public class PasswordSettings
         menu.findItem(R.id.export_passwords).setEnabled(false);
         mSearchItem = menu.findItem(R.id.menu_id_search);
         mSearchItem.setVisible(true);
-        mHelpItem = menu.findItem(R.id.menu_id_targeted_help);
         SearchUtils.initializeSearchView(
                 mSearchItem, mSearchQuery, getActivity(), this::filterPasswords);
     }
@@ -226,8 +224,6 @@ public class PasswordSettings
 
     private void filterPasswords(String query) {
         mSearchQuery = query;
-        mHelpItem.setShowAsAction(mSearchQuery == null ? MenuItem.SHOW_AS_ACTION_IF_ROOM
-                                                       : MenuItem.SHOW_AS_ACTION_NEVER);
         rebuildPasswordLists();
     }
 
--- a/chrome/android/java/res/menu/save_password_preferences_action_bar_menu.xml
+++ b/chrome/android/java/res/menu/save_password_preferences_action_bar_menu.xml
@@ -14,12 +14,6 @@
         app:actionViewClass="androidx.appcompat.widget.SearchView" />
 
     <item
-        android:id="@id/menu_id_targeted_help"
-        android:icon="@drawable/ic_help_and_feedback"
-        android:title="@string/menu_help"
-        app:showAsAction="ifRoom"/>
-
-    <item
         android:id="@+id/export_passwords"
         android:title="@string/password_settings_export_action_title"
         android:contentDescription="@string/password_settings_export_action_description"
--- a/chrome/android/java/src/org/chromium/chrome/browser/site_settings/ChromeSiteSettingsDelegate.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/site_settings/ChromeSiteSettingsDelegate.java
@@ -202,7 +202,7 @@ public class ChromeSiteSettingsDelegate
 
     @Override
     public boolean isHelpAndFeedbackEnabled() {
-        return true;
+        return false;
     }
 
     @Override
--- a/components/autofill_assistant/browser/features.cc
+++ b/components/autofill_assistant/browser/features.cc
@@ -14,14 +14,14 @@ const base::Feature kAutofillAssistant{"
 
 // Controls whether to enable Assistant Autofill in a normal Chrome tab.
 const base::Feature kAutofillAssistantChromeEntry{
-    "AutofillAssistantChromeEntry", base::FEATURE_ENABLED_BY_DEFAULT};
+    "AutofillAssistantChromeEntry", base::FEATURE_DISABLED_BY_DEFAULT};
 
 // Controls whether to enable dialog onboarding for Autofill Assistant
 const base::Feature kAutofillAssistantDialogOnboarding{
-    "AutofillAssistantDialogOnboarding", base::FEATURE_ENABLED_BY_DEFAULT};
+    "AutofillAssistantDialogOnboarding", base::FEATURE_DISABLED_BY_DEFAULT};
 
 const base::Feature kAutofillAssistantDirectActions{
-    "AutofillAssistantDirectActions", base::FEATURE_ENABLED_BY_DEFAULT};
+    "AutofillAssistantDirectActions", base::FEATURE_DISABLED_BY_DEFAULT};
 
 // Controls whether to disable onboarding flow for Autofill Assistant
 const base::Feature kAutofillAssistantDisableOnboardingFlow{
@@ -43,7 +43,7 @@ const base::Feature kAutofillAssistantIn
 
 // Controls whether to show the "Send feedback" chip while in an error state.
 const base::Feature kAutofillAssistantFeedbackChip{
-    "AutofillAssistantFeedbackChip", base::FEATURE_ENABLED_BY_DEFAULT};
+    "AutofillAssistantFeedbackChip", base::FEATURE_DISABLED_BY_DEFAULT};
 
 // Whether autofill assistant should load the DFM for trigger scripts when
 // necessary. Without this feature, trigger scripts will exit if the DFM is not
@@ -53,7 +53,7 @@ const base::Feature kAutofillAssistantLo
     base::FEATURE_DISABLED_BY_DEFAULT};
 
 const base::Feature kAutofillAssistantProactiveHelp{
-    "AutofillAssistantProactiveHelp", base::FEATURE_ENABLED_BY_DEFAULT};
+    "AutofillAssistantProactiveHelp", base::FEATURE_DISABLED_BY_DEFAULT};
 
 // Use Chrome's TabHelper system to deal with the life cycle of WebContent's
 // depending Autofill Assistant objects.
--- a/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
@@ -2241,16 +2241,6 @@ public abstract class ChromeActivity<C e
 
         final Tab currentTab = getActivityTab();
 
-        if (id == R.id.help_id) {
-            String url = currentTab != null ? currentTab.getUrl().getSpec() : "";
-            Profile profile = getTabModelSelector().isIncognitoSelected()
-                    ? Profile.getLastUsedRegularProfile().getPrimaryOTRProfile(
-                            /*createIfNeeded=*/true)
-                    : Profile.getLastUsedRegularProfile();
-            startHelpAndFeedback(url, "MobileMenuFeedback", profile);
-            return true;
-        }
-
         if (id == R.id.open_history_menu_id) {
             // 'currentTab' could only be null when opening history from start surface, which is
             // not available on tablet.
