---
 chrome/android/chrome_java_sources.gni                                                              |    1 
 chrome/android/java/AndroidManifest.xml                                                             |    2 
 chrome/android/java/src/org/chromium/chrome/browser/omaha/UpdateConfigs.java                        |   18 
 chrome/android/java/src/org/chromium/chrome/browser/omaha/UpdateStatusProvider.java                 |   32 +
 chrome/android/java/src/org/chromium/chrome/browser/omaha/inline/InlineUpdateControllerFactory.java |    2 
 chrome/android/java/src/org/chromium/chrome/browser/omaha/inline/UCInlineUpdateController.java      |  244 ++++++++++
 chrome/browser/flag-metadata.json                                                                   |    2 
 chrome/browser/flag_descriptions.cc                                                                 |    5 
 chrome/browser/ui/android/strings/android_chrome_strings.grd                                        |    2 
 chrome/browser/updates/update_notification_config.cc                                                |    2 
 10 files changed, 297 insertions(+), 13 deletions(-)

--- /dev/null
+++ b/chrome/android/java/src/org/chromium/chrome/browser/omaha/inline/UCInlineUpdateController.java
@@ -0,0 +1,244 @@
+// Copyright 2021 The Ungoogled Chromium Authors. All rights reserved.
+//
+// This file is part of Ungoogled Chromium Android.
+//
+// Ungoogled Chromium Android is free software: you can redistribute it
+// and/or modify it under the terms of the GNU General Public License as
+// published by the Free Software Foundation, either version 3 of the
+// License, or any later version.
+//
+// Ungoogled Chromium Android is distributed in the hope that it will be
+// useful, but WITHOUT ANY WARRANTY; without even the implied warranty
+// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Ungoogled Chromium Android.  If not,
+// see <https://www.gnu.org/licenses/>.
+
+package org.chromium.chrome.browser.omaha.inline;
+
+import static org.chromium.chrome.browser.omaha.UpdateConfigs.getUpdateNotificationInterval;
+import static org.chromium.chrome.browser.omaha.notification.UpdateNotificationControllerImpl.PREF_LAST_TIME_UPDATE_NOTIFICATION_KEY;
+
+import android.app.Activity;
+import android.content.SharedPreferences;
+import android.os.Build;
+
+import androidx.annotation.Nullable;
+
+import org.chromium.base.Callback;
+import org.chromium.base.Log;
+import org.chromium.base.task.AsyncTask;
+import org.chromium.base.task.PostTask;
+import org.chromium.chrome.browser.app.ChromeActivity;
+import org.chromium.chrome.browser.omaha.OmahaBase;
+import org.chromium.chrome.browser.omaha.UpdateConfigs;
+import org.chromium.chrome.browser.omaha.UpdateStatusProvider;
+import org.chromium.chrome.browser.omaha.VersionNumber;
+import org.chromium.chrome.browser.tab.TabLaunchType;
+import org.chromium.chrome.browser.tabmodel.TabCreator;
+import org.chromium.chrome.browser.version.ChromeVersionInfo;
+import org.chromium.content_public.browser.LoadUrlParams;
+import org.chromium.content_public.browser.UiThreadTaskTraits;
+import org.chromium.ui.base.PageTransition;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.MalformedURLException;
+import java.net.URL;
+
+/**
+ * An update controller that does nothing. This is used if the inline update experiment has
+ * not been enabled.
+ */
+class UCInlineUpdateController implements InlineUpdateController {
+
+    private static final String TAG = "UCInlineUpdateController";
+    private final URL UPDATE_VERSION_URL = makeURL("https://uc.droidware.info/release.txt");
+
+    private @Nullable URL makeURL(String url) {
+        try {
+            return new URL(url);
+        } catch (MalformedURLException e) {
+            Log.e(TAG, "URL is malformed!");
+        }
+        return null;
+    }
+
+    private boolean mEnabled;
+    private Runnable mCallback;
+    private @Nullable @UpdateStatusProvider.UpdateState Integer mUpdateState;
+    private VersionNumber mCurrentProductVersion;
+//    private String mLatestVersionString;
+
+    UCInlineUpdateController(Runnable callback) {
+        mCallback = callback;
+    }
+
+    @Override
+    public void setEnabled(boolean enabled) {
+        Log.i(TAG, "getStatus: mEnabled: %b, enabled: %b", mEnabled, enabled);
+        if (mEnabled == enabled) return;
+        mEnabled = enabled;
+
+        if (mEnabled) {
+            mUpdateState = UpdateStatusProvider.UpdateState.NONE;
+            pullCurrentState();
+        } else {
+        }
+    }
+
+    @Override
+    public @Nullable @UpdateStatusProvider.UpdateState Integer getStatus() {
+        Log.i(TAG, "getStatus: mEnabled: %b", mEnabled);
+        if (mEnabled) {
+            pullCurrentState();
+        } else {
+        }
+        Log.i(TAG, "getStatus: mUpdateState: %d", mUpdateState);
+        return mUpdateState;
+    }
+
+    @Override
+    public void startUpdate(Activity activity) {
+        assert ChromeActivity.class.isInstance(activity);
+        ChromeActivity thisActivity = (ChromeActivity) activity;
+        String downloadUrl = getDownloadUrl();
+        // Always open in new normal tab
+        TabCreator tabCreator = thisActivity.getTabCreator(false);
+        tabCreator.createNewTab(new LoadUrlParams(downloadUrl, PageTransition.AUTO_BOOKMARK),
+                TabLaunchType.FROM_LINK, thisActivity.getActivityTab());
+        Log.i(TAG, "startUpdate: New tab opened");
+    }
+
+    @Override
+    public void completeUpdate() {
+
+    }
+
+    private void pullCurrentState() {
+        // The whole omaha updater seems messy, using a simple condition to guard update pulls for now
+        if (!UpdateConfigs.getInlineEnabled()) {
+            return;
+        }
+
+        int currentApiVersion = Build.VERSION.SDK_INT;
+        assert currentApiVersion > Build.VERSION_CODES.KITKAT;
+        mCurrentProductVersion = VersionNumber.fromString(ChromeVersionInfo.getProductVersion());
+        Log.i(TAG, "mCurrentProductVersion: %s", mCurrentProductVersion.toString());
+
+        boolean shallUpdate = shallUpdate();
+        switch (mUpdateState) {
+            case UpdateStatusProvider.UpdateState.INLINE_UPDATE_AVAILABLE:
+                if (!shallUpdate) {
+                    Log.i(TAG, "pullCurrentState: INLINE_UPDATE_AVAILABLE: !shallUpdate");
+                    break;
+                }
+                //Intentional fall through.
+            case UpdateStatusProvider.UpdateState.NONE:
+                if (!shallUpdate) {
+                    Log.i(TAG, "pullCurrentState: NONE: !shallUpdate");
+                    break;
+                }
+                checkLatestVersion((result) -> {
+                    // Compare version strings if not null
+                    if (result == null) return;
+
+                    if (isNewVersionAvailable(result)) {
+                        postStatus(UpdateStatusProvider.UpdateState.INLINE_UPDATE_AVAILABLE);
+                    } else {
+                        if (mUpdateState != UpdateStatusProvider.UpdateState.NONE) {
+                            postStatus(UpdateStatusProvider.UpdateState.NONE);
+                        }
+                    }
+                });
+                break;
+            case UpdateStatusProvider.UpdateState.INLINE_UPDATE_READY:
+                // Intentional fall through.
+            case UpdateStatusProvider.UpdateState.INLINE_UPDATE_FAILED:
+                // Intentional fall through.
+            case UpdateStatusProvider.UpdateState.INLINE_UPDATE_DOWNLOADING:
+                // Intentional fall through.
+            case UpdateStatusProvider.UpdateState.UNSUPPORTED_OS_VERSION:
+                // Intentional fall through.
+            default:
+                return;
+        }
+    }
+
+    private boolean shallUpdate() {
+        long currentTime = System.currentTimeMillis();
+        SharedPreferences preferences = OmahaBase.getSharedPreferences();
+        long lastPushedTimeStamp = preferences.getLong(PREF_LAST_TIME_UPDATE_NOTIFICATION_KEY, 0);
+        return currentTime - lastPushedTimeStamp >= getUpdateNotificationInterval();
+    }
+
+    private void checkLatestVersion(final Callback<String> callback) {
+        assert UPDATE_VERSION_URL != null;
+        new AsyncTask<String>() {
+            @Override
+            protected String doInBackground() {
+                try {
+                    String inputLine;
+                    StringBuilder content = new StringBuilder();
+                    BufferedReader bufferedReader = new BufferedReader(
+                            new InputStreamReader(UPDATE_VERSION_URL.openStream()));
+                    while ((inputLine = bufferedReader.readLine()) != null)
+                        content.append(inputLine);
+                    bufferedReader.close();
+
+                    Log.i(TAG, "Obtained version: %s", content.toString());
+                    return content.toString();
+                } catch (IOException e) {
+                    Log.i(TAG, "Obtain version info failed");
+                    return null;
+                }
+            }
+
+            @Override
+            protected void onPostExecute(String result) {
+                callback.onResult(result);
+                updateLastPushedTimeStamp();
+            }
+        }
+                .executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
+    }
+
+    private boolean isNewVersionAvailable(String latestVersionString) {
+        if (mCurrentProductVersion == null || latestVersionString == null)
+            return false;
+        VersionNumber latestVersion = VersionNumber.fromString(latestVersionString);
+        Log.i(TAG, "isNewVersionAvailable: mCurrentProductVersion: %s",
+                mCurrentProductVersion.toString());
+        Log.i(TAG, "isNewVersionAvailable: latestVersion: %s",
+                latestVersion.toString());
+
+        return mCurrentProductVersion.isSmallerThan(latestVersion);
+    }
+
+    private String getDownloadUrl() {
+        return "https://uc.droidware.info/";
+    }
+
+    private void postStatus(@UpdateStatusProvider.UpdateState int status) {
+        mUpdateState = status;
+        PostTask.postTask(UiThreadTaskTraits.DEFAULT, mCallback);
+    }
+
+    private static @UpdateStatusProvider.UpdateState int toUpdateState(
+            int updateAvailability, int installStatus) {
+        @UpdateStatusProvider.UpdateState int newStatus = UpdateStatusProvider.UpdateState.NONE;
+
+        return newStatus;
+    }
+
+    private static void updateLastPushedTimeStamp() {
+        SharedPreferences preferences = OmahaBase.getSharedPreferences();
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.putLong(PREF_LAST_TIME_UPDATE_NOTIFICATION_KEY, System.currentTimeMillis());
+        editor.apply();
+    }
+
+}
--- a/chrome/android/chrome_java_sources.gni
+++ b/chrome/android/chrome_java_sources.gni
@@ -883,6 +883,7 @@ chrome_java_sources = [
   "java/src/org/chromium/chrome/browser/omaha/inline/InlineUpdateController.java",
   "java/src/org/chromium/chrome/browser/omaha/inline/InlineUpdateControllerFactory.java",
   "java/src/org/chromium/chrome/browser/omaha/inline/NoopInlineUpdateController.java",
+  "java/src/org/chromium/chrome/browser/omaha/inline/UCInlineUpdateController.java",
   "java/src/org/chromium/chrome/browser/omaha/inline/PlayInlineUpdateController.java",
   "java/src/org/chromium/chrome/browser/omaha/metrics/HistogramUtils.java",
   "java/src/org/chromium/chrome/browser/omaha/metrics/TrackingProvider.java",
--- a/chrome/android/java/src/org/chromium/chrome/browser/omaha/UpdateConfigs.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/omaha/UpdateConfigs.java
@@ -14,6 +14,7 @@ import androidx.annotation.Nullable;
 
 import org.chromium.base.CommandLine;
 import org.chromium.base.ContextUtils;
+import org.chromium.base.Log;
 import org.chromium.chrome.R;
 import org.chromium.chrome.browser.flags.ChromeFeatureList;
 import org.chromium.chrome.browser.flags.ChromeSwitches;
@@ -65,9 +66,11 @@ public class UpdateConfigs {
     private static final String UPDATE_NOTIFICATION_EXPERIMENTAL_PARAM_NAME =
             "update_notification_experimental_context";
 
-    private static final long DEFAULT_UPDATE_NOTIFICATION_INTERVAL = 21 * DateUtils.DAY_IN_MILLIS;
+    private static final long DEFAULT_UPDATE_NOTIFICATION_INTERVAL = 7 * DateUtils.DAY_IN_MILLIS;
     private static final long DEFAULT_UPDATE_ATTRIBUTION_WINDOW_MS = 2 * DateUtils.DAY_IN_MILLIS;
 
+    private static final String TAG = "UpdateConfigs";
+
     /** Possible update flow configurations. */
     @IntDef({UpdateFlowConfiguration.NEVER_SHOW, UpdateFlowConfiguration.INTENT_ONLY,
             UpdateFlowConfiguration.INLINE_ONLY, UpdateFlowConfiguration.BEST_EFFORT})
@@ -234,6 +237,9 @@ public class UpdateConfigs {
      * @return true if update notification is enabled, false if disabled.
      */
     public static boolean isUpdateNotificationEnabled() {
+        Log.i(TAG, "isUpdateNotificationEnabled: %b",
+                ChromeFeatureList.getFieldTrialParamByFeatureAsBoolean(
+                ChromeFeatureList.INLINE_UPDATE_FLOW, UPDATE_NOTIFICATION_STATE_PARAM_NAME, false));
         return ChromeFeatureList.getFieldTrialParamByFeatureAsBoolean(
                 ChromeFeatureList.INLINE_UPDATE_FLOW, UPDATE_NOTIFICATION_STATE_PARAM_NAME, false);
     }
@@ -301,11 +307,15 @@ public class UpdateConfigs {
      */
     @UpdateFlowConfiguration
     static int getConfiguration() {
+        Log.i(TAG, "INLINE_UPDATE_FLOW enabled: %b",
+                ChromeFeatureList.isEnabled(ChromeFeatureList.INLINE_UPDATE_FLOW));
         if (!ChromeFeatureList.isEnabled(ChromeFeatureList.INLINE_UPDATE_FLOW)) {
             // Always use the the old flow if the inline update flow feature is not enabled.
             return UpdateFlowConfiguration.INTENT_ONLY;
         }
 
+        Log.i(TAG, "getFieldTrialConfigurationLowerCase: %s",
+                getFieldTrialConfigurationLowerCase());
         switch (getFieldTrialConfigurationLowerCase()) {
             case "never_show":
                 return UpdateFlowConfiguration.NEVER_SHOW;
@@ -321,6 +331,10 @@ public class UpdateConfigs {
         }
     }
 
+    public static boolean getInlineEnabled() {
+        return UpdateConfigs.getConfiguration() == UpdateConfigs.UpdateFlowConfiguration.INLINE_ONLY;
+    }
+
     @NonNull
     private static String getFieldTrialConfigurationLowerCase() {
         String configuration = ChromeFeatureList.getFieldTrialParamByFeature(
@@ -328,4 +342,4 @@ public class UpdateConfigs {
         if (configuration == null) return "";
         return configuration.toLowerCase(Locale.US);
     }
-}
\ No newline at end of file
+}
--- a/chrome/android/java/src/org/chromium/chrome/browser/omaha/inline/InlineUpdateControllerFactory.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/omaha/inline/InlineUpdateControllerFactory.java
@@ -21,6 +21,6 @@ public class InlineUpdateControllerFacto
 
         // No test scenario was in place, and the inline flow has not been enabled, so use a
         // controller with no functionality.
-        return new NoopInlineUpdateController(callback);
+        return new UCInlineUpdateController(callback);
     }
 }
--- a/chrome/android/java/src/org/chromium/chrome/browser/omaha/UpdateStatusProvider.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/omaha/UpdateStatusProvider.java
@@ -25,6 +25,7 @@ import org.chromium.base.ApplicationStat
 import org.chromium.base.BuildInfo;
 import org.chromium.base.Callback;
 import org.chromium.base.ContextUtils;
+import org.chromium.base.Log;
 import org.chromium.base.ObserverList;
 import org.chromium.base.ThreadUtils;
 import org.chromium.base.metrics.RecordHistogram;
@@ -142,6 +143,7 @@ public class UpdateStatusProvider implem
     private final UpdateQuery mOmahaQuery;
     private final UpdateSuccessMetrics mMetrics;
     private @Nullable UpdateStatus mStatus;
+    private static String TAG = "UpdateStatusProvider";
 
     /** Whether or not we've recorded the initial update status yet. */
     private boolean mRecordedInitialStatus;
@@ -281,6 +283,7 @@ public class UpdateStatusProvider implem
     }
 
     private UpdateStatusProvider() {
+        Log.i(TAG, "UpdateStatusProvider()");
         mInlineController = InlineUpdateControllerFactory.create(this::resolveStatus);
         mOmahaQuery = new UpdateQuery(this::resolveStatus);
         mMetrics = new UpdateSuccessMetrics();
@@ -294,14 +297,25 @@ public class UpdateStatusProvider implem
     }
 
     private void resolveStatus() {
+        Log.i(TAG, "resolveStatus");
         if (mOmahaQuery.getStatus() != Status.FINISHED || mInlineController.getStatus() == null) {
+            Log.i(TAG,
+                    "resolveStatus: mOmahaQuery.getStatus() != Status.FINISHED: %b",
+                    mOmahaQuery.getStatus() != Status.FINISHED);
+            Log.i(TAG,
+                    "resolveStatus: mInlineController.getStatus() == null: %b",
+                    mInlineController.getStatus() == null);
             return;
         }
 
         // We pull the Omaha result once as it will never change.
-        if (mStatus == null) mStatus = new UpdateStatus(mOmahaQuery.getResult());
+        if (mStatus == null) {
+            Log.i(TAG, "resolveStatus: mStatus == null");
+            mStatus = new UpdateStatus(mOmahaQuery.getResult());
+        }
 
         if (mStatus.mIsSimulated) {
+            Log.i(TAG, "resolveStatus: mStatus.mIsSimulated");
             if (mStatus.mIsInlineSimulated) {
                 @UpdateState
                 int inlineState = mInlineController.getStatus();
@@ -317,8 +331,13 @@ public class UpdateStatusProvider implem
             int omahaState = mOmahaQuery.getResult().updateState;
             @UpdateState
             int inlineState = mInlineController.getStatus();
+            Log.i(TAG,
+                "configuration: %d, omahaState: %d, inlineState: %d",
+                    UpdateConfigs.getConfiguration(), omahaState, inlineState);
             mStatus.updateState = resolveOmahaAndInlineStatus(
                     UpdateConfigs.getConfiguration(), omahaState, inlineState);
+            Log.i(TAG, "mStatus.updateState: %d",
+                    mStatus.updateState);
         }
 
         if (!mRecordedInitialStatus) {
@@ -337,17 +356,22 @@ public class UpdateStatusProvider implem
             @UpdateState int inlineState) {
         switch (configuration) {
             case UpdateConfigs.UpdateFlowConfiguration.NEVER_SHOW:
+                Log.i(TAG, "configuation == NEVER_SHOW");
                 return UpdateState.NONE;
             case UpdateConfigs.UpdateFlowConfiguration.INLINE_ONLY:
-                if (omahaState != UpdateState.UPDATE_AVAILABLE) return omahaState;
+                Log.i(TAG, "configuation == INLINE_ONLY");
+//                if (omahaState != UpdateState.UPDATE_AVAILABLE) return omahaState;
                 if (inlineState == UpdateState.NONE) return UpdateState.NONE;
                 return inlineState;
             case UpdateConfigs.UpdateFlowConfiguration.BEST_EFFORT:
-                if (omahaState != UpdateState.UPDATE_AVAILABLE) return omahaState;
+                Log.i(TAG, "configuation == BEST_EFFORT");
+//                if (omahaState != UpdateState.UPDATE_AVAILABLE) return omahaState;
                 if (inlineState == UpdateState.NONE) return omahaState;
                 return inlineState;
             case UpdateConfigs.UpdateFlowConfiguration.INTENT_ONLY: // Intentional fall through.
+                Log.i(TAG, "configuation == INTENT_ONLY");
             default:
+                Log.i(TAG, "configuation default");
                 // Fall back to use Omaha only and use the old flow.
                 return omahaState;
         }
@@ -374,6 +398,8 @@ public class UpdateStatusProvider implem
         @Override
         protected UpdateStatus doInBackground() {
             UpdateStatus testStatus = getTestStatus();
+            Log.i(TAG, "getTestStatus == null: %b",
+                    testStatus == null);
             if (testStatus != null) return testStatus;
             return getRealStatus(mContext);
         }
--- a/chrome/browser/updates/update_notification_config.cc
+++ b/chrome/browser/updates/update_notification_config.cc
@@ -25,7 +25,7 @@ bool GetFinchConfigBool(const std::strin
 }  // namespace
 
 // Default update notification schedule initial interval in days.
-constexpr int kDefaultUpdateNotificationInitInterval = 21;
+constexpr int kDefaultUpdateNotificationInitInterval = 2;
 
 // Default update notification schedule maximum interval in days.
 constexpr int kDefaultUpdateNotificationMaxInterval = 90;
--- a/chrome/android/java/AndroidManifest.xml
+++ b/chrome/android/java/AndroidManifest.xml
@@ -1114,7 +1114,7 @@ by a child template that "extends" this
         <service android:name="org.chromium.chrome.browser.tracing.TracingNotificationService"
             android:exported="false"/>
 
-        <receiver android:name="org.chromium.chrome.browser.omaha.UpdateNotificationController$UpdateNotificationReceiver"
+        <receiver android:name="org.chromium.chrome.browser.omaha.notification.UpdateNotificationControllerImpl$UpdateNotificationReceiver"
             android:exported="false"/>
 
         <meta-data android:name="org.chromium.content.browser.SMART_CLIP_PROVIDER"
--- a/chrome/browser/ui/android/strings/android_chrome_strings.grd
+++ b/chrome/browser/ui/android/strings/android_chrome_strings.grd
@@ -2024,7 +2024,7 @@ To change this setting, <ph name="BEGIN_
         Update Chrome
       </message>
       <message name="IDS_UPDATE_NOTIFICATION_TEXT_BODY_DEFAULT" desc="Default text showing in the update notification body, kindly telling user to update to the latest version of Chrome.">
-        For the best browsing experience, open to update Chrome
+        For the best browsing experience, open to update Ungoogled-Chromium
       </message>
       <message name="IDS_UPDATE_NOTIFICATION_TITLE_EXPERIMENTAL_UPDATE_CHROME" desc="Experimental version A title of update notification to remind user to update Chrome.">
         Update Chrome
--- a/chrome/browser/flag-metadata.json
+++ b/chrome/browser/flag-metadata.json
@@ -2054,7 +2054,7 @@
   {
     "name": "enable-inline-update-flow",
     "owners": [ "nyquist", "dtrainor" ],
-    "expiry_milestone": 83
+    "expiry_milestone": -1
   },
   {
     "name": "enable-input-event-logging",
--- a/chrome/browser/flag_descriptions.cc
+++ b/chrome/browser/flag_descriptions.cc
@@ -3643,10 +3643,9 @@ const char kVoiceButtonInTopToolbarDescr
     "Enables showing the voice search button in the top toolbar. Enabling "
     "Adaptive Button overrides this.";
 
-const char kInlineUpdateFlowName[] = "Enable Google Play inline update flow";
+const char kInlineUpdateFlowName[] = "Enable inline update flow";
 const char kInlineUpdateFlowDescription[] =
-    "When this flag is set, instead of taking the user to the Google Play "
-    "Store when an update is available, the user is presented with an inline "
+    "When this flag is set, the user is presented with an inline "
     "flow where they do not have to leave Chrome until the update is ready "
     "to install.";
 
