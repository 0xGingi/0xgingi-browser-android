From: Wengling Chen <feiyu2817@gmail.com>
Date: Fri, 10 Jan 2020 18:01:56 -0500
Subject: Fix build error caused by the removal of safe_browsing

---
 android_webview/browser/aw_browser_context.cc                                                                                                |    2 
 android_webview/browser/safe_browsing/aw_safe_browsing_blocking_page.cc                                                                      |   13 
 chrome/android/BUILD.gn                                                                                                                      |    1 
 chrome/android/java/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoController.java               |    6 
 chrome/android/java/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoUtils.java                    |    4 
 chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java                                                    |    8 
 chrome/android/java/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingSettingsLauncher.java                                          |    7 
 chrome/android/java/src/org/chromium/chrome/browser/sync/settings/GoogleServicesSettings.java                                                |    7 
 chrome/android/java/src/org/chromium/chrome/browser/sync/settings/SignInPreference.java                                                      |    6 
 chrome/browser/android/tab_web_contents_delegate_android.cc                                                                                  |    2 
 chrome/browser/password_manager/chrome_password_manager_client.cc                                                                            |    2 
 chrome/browser/preferences/BUILD.gn                                                                                                          |    1 
 chrome/browser/safe_browsing/BUILD.gn                                                                                                        |    1 
 chrome/browser/safe_browsing/android/BUILD.gn                                                                                                |    1 
 chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingBridge.java                              |   31 -
 chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/settings/RadioButtonGroupSafeBrowsingPreference.java |   28 -
 chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/settings/SafeBrowsingSettingsFragment.java           |  168 --------
 chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/settings/StandardProtectionSettingsFragment.java     |    8 
 components/safe_browsing/content/browser/client_side_detection_host.cc                                                                       |    9 
 components/safe_browsing/content/browser/client_side_detection_host.h                                                                        |    3 
 components/safe_browsing/content/browser/client_side_detection_service.cc                                                                    |   31 -
 weblayer/browser/browser_context_impl.cc                                                                                                     |    2 
 weblayer/browser/browser_process.cc                                                                                                          |   11 
 weblayer/browser/browser_process.h                                                                                                           |    4 
 weblayer/browser/browsing_data_remover_delegate.cc                                                                                           |    2 
 weblayer/browser/content_browser_client_impl.cc                                                                                              |   18 
 weblayer/browser/profile_impl.cc                                                                                                             |   16 
 weblayer/browser/safe_browsing/client_side_detection_service_delegate.cc                                                                     |   12 
 weblayer/browser/safe_browsing/client_side_detection_service_factory.cc                                                                      |    4 
 weblayer/browser/safe_browsing/real_time_url_lookup_service_factory.cc                                                                       |    7 
 weblayer/browser/safe_browsing/safe_browsing_blocking_page.cc                                                                                |    8 
 weblayer/browser/safe_browsing/safe_browsing_service.cc                                                                                      |  200 ----------
 weblayer/browser/safe_browsing/safe_browsing_tab_observer.cc                                                                                 |   11 
 weblayer/browser/tab_impl.cc                                                                                                                 |    2 
 34 files changed, 60 insertions(+), 576 deletions(-)

--- a/chrome/android/BUILD.gn
+++ b/chrome/android/BUILD.gn
@@ -356,7 +356,6 @@ android_library("chrome_java") {
     "//chrome/browser/privacy:java",
     "//chrome/browser/privacy_sandbox/android:java",
     "//chrome/browser/profiles/android:java",
-    "//chrome/browser/safe_browsing/android:java",
     "//chrome/browser/safety_check/android:java",
     "//chrome/browser/search_engines/android:java",
     "//chrome/browser/settings:java",
--- a/android_webview/browser/aw_browser_context.cc
+++ b/android_webview/browser/aw_browser_context.cc
@@ -240,7 +240,7 @@ base::FilePath AwBrowserContext::GetCont
 
 // static
 void AwBrowserContext::RegisterPrefs(PrefRegistrySimple* registry) {
-  safe_browsing::RegisterProfilePrefs(registry);
+  // safe_browsing::RegisterProfilePrefs(registry);
 
   // Register the Autocomplete Data Retention Policy pref.
   // The default value '0' represents the latest Chrome major version on which
--- a/android_webview/browser/safe_browsing/aw_safe_browsing_blocking_page.cc
+++ b/android_webview/browser/safe_browsing/aw_safe_browsing_blocking_page.cc
@@ -16,7 +16,6 @@
 #include "base/metrics/histogram_macros.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/content/browser/threat_details.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/common/safebrowsing_constants.h"
 #include "components/safe_browsing/core/common/utils.h"
 #include "components/safe_browsing/core/features.h"
@@ -111,16 +110,16 @@ AwSafeBrowsingBlockingPage* AwSafeBrowsi
   BaseSafeBrowsingErrorUI::SBErrorDisplayOptions display_options =
       BaseSafeBrowsingErrorUI::SBErrorDisplayOptions(
           IsMainPageLoadBlocked(unsafe_resources),
-          safe_browsing::IsExtendedReportingOptInAllowed(*pref_service),
+          false,
           browser_context->IsOffTheRecord(),
-          safe_browsing::IsExtendedReportingEnabled(*pref_service),
-          safe_browsing::IsExtendedReportingPolicyManaged(*pref_service),
-          safe_browsing::IsEnhancedProtectionEnabled(*pref_service),
-          pref_service->GetBoolean(::prefs::kSafeBrowsingProceedAnywayDisabled),
+          false,
+          false,
+          false,
+          false,
           false,  // should_open_links_in_new_tab
           false,  // always_show_back_to_safety
           false,  // is_enhanced_protection_message_enabled
-          safe_browsing::IsSafeBrowsingPolicyManaged(*pref_service),
+          false,
           "cpn_safe_browsing_wv");  // help_center_article_link
 
   ErrorUiType errorType =
--- a/weblayer/browser/browser_context_impl.cc
+++ b/weblayer/browser/browser_context_impl.cc
@@ -21,7 +21,6 @@
 #include "components/prefs/json_pref_store.h"
 #include "components/prefs/pref_service.h"
 #include "components/prefs/pref_service_factory.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/stateful_ssl_host_state_delegate.h"
 #include "components/site_isolation/pref_names.h"
 #include "components/site_isolation/site_isolation_policy.h"
@@ -281,7 +280,6 @@ void BrowserContextImpl::RegisterPrefs(
 
   StatefulSSLHostStateDelegate::RegisterProfilePrefs(pref_registry);
   HostContentSettingsMap::RegisterProfilePrefs(pref_registry);
-  safe_browsing::RegisterProfilePrefs(pref_registry);
   language::LanguagePrefs::RegisterProfilePrefs(pref_registry);
   translate::TranslatePrefs::RegisterProfilePrefs(pref_registry);
   blocked_content::SafeBrowsingTriggeredPopupBlocker::RegisterProfilePrefs(
--- a/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/GoogleServicesSettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/GoogleServicesSettings.java
@@ -182,7 +182,6 @@ public class GoogleServicesSettings
                     identityManager.getPrimaryAccountInfo(ConsentLevel.SIGNIN) != null
                     && !((boolean) newValue);
             if (!shouldSignUserOut) {
-                mPrefService.setBoolean(Pref.SIGNIN_ALLOWED, (boolean) newValue);
                 return true;
             }
 
@@ -193,7 +192,6 @@ public class GoogleServicesSettings
                 IdentityServicesProvider.get()
                         .getSigninManager(Profile.getLastUsedRegularProfile())
                         .signOut(SignoutReason.USER_CLICKED_SIGNOUT_SETTINGS, null, false);
-                mPrefService.setBoolean(Pref.SIGNIN_ALLOWED, false);
                 return true;
             }
 
@@ -225,7 +223,7 @@ public class GoogleServicesSettings
     }
 
     private void updatePreferences() {
-        mAllowSignin.setChecked(mPrefService.getBoolean(Pref.SIGNIN_ALLOWED));
+        mAllowSignin.setChecked(false);
         mSearchSuggestions.setChecked(mPrefService.getBoolean(Pref.SEARCH_SUGGEST_ENABLED));
         if (mNavigationError != null) {
             mNavigationError.setChecked(
@@ -253,7 +251,7 @@ public class GoogleServicesSettings
         return preference -> {
             String key = preference.getKey();
             if (PREF_ALLOW_SIGNIN.equals(key)) {
-                return mPrefService.isManagedPreference(Pref.SIGNIN_ALLOWED);
+                return false;
             }
             if (PREF_NAVIGATION_ERROR.equals(key)) {
                 return mPrefService.isManagedPreference(Pref.ALTERNATE_ERROR_PAGES_ENABLED);
@@ -320,7 +318,6 @@ public class GoogleServicesSettings
                             }
                         },
                         forceWipeUserData);
-        mPrefService.setBoolean(Pref.SIGNIN_ALLOWED, false);
         updatePreferences();
     }
 }
--- a/chrome/browser/safe_browsing/BUILD.gn
+++ b/chrome/browser/safe_browsing/BUILD.gn
@@ -347,7 +347,6 @@ static_library("safe_browsing") {
         deps += [ "//components/safe_browsing/android:remote_database_manager" ]
       }
       deps += [
-        "//chrome/browser/safe_browsing/android",
         "//components/safe_browsing:buildflags",
         "//components/safe_browsing/android:safe_browsing_mobile",
       ]
--- a/chrome/browser/preferences/BUILD.gn
+++ b/chrome/browser/preferences/BUILD.gn
@@ -36,7 +36,6 @@ java_cpp_strings("java_pref_names_srcjar
     "//components/offline_pages/core/prefetch/prefetch_prefs.cc",
     "//components/password_manager/core/common/password_manager_pref_names.cc",
     "//components/payments/core/payment_prefs.cc",
-    "//components/safe_browsing/core/common/safe_browsing_prefs.cc",
     "//components/signin/public/base/signin_pref_names.cc",
     "//components/translate/core/browser/translate_pref_names.cc",
   ]
--- a/chrome/browser/android/tab_web_contents_delegate_android.cc
+++ b/chrome/browser/android/tab_web_contents_delegate_android.cc
@@ -173,8 +173,6 @@ void TabWebContentsDelegateAndroid::Port
   infobars::ContentInfoBarManager::CreateForWebContents(portal_contents);
   PrefsTabHelper::CreateForWebContents(portal_contents);
   DataReductionProxyTabHelper::CreateForWebContents(portal_contents);
-  safe_browsing::SafeBrowsingNavigationObserver::MaybeCreateForWebContents(
-      portal_contents);
 }
 
 void TabWebContentsDelegateAndroid::RunFileChooser(
--- a/weblayer/browser/content_browser_client_impl.cc
+++ b/weblayer/browser/content_browser_client_impl.cc
@@ -510,8 +510,7 @@ ContentBrowserClientImpl::CreateURLLoade
 #if defined(OS_ANDROID)
     BrowserContextImpl* browser_context_impl =
         static_cast<BrowserContextImpl*>(browser_context);
-    bool is_safe_browsing_enabled = safe_browsing::IsSafeBrowsingEnabled(
-        *browser_context_impl->pref_service());
+    bool is_safe_browsing_enabled = false;
 
     if (is_safe_browsing_enabled) {
       bool is_real_time_lookup_enabled =
@@ -843,16 +842,6 @@ ContentBrowserClientImpl::CreateThrottle
 
 #if defined(OS_ANDROID)
   if (handle->IsInMainFrame()) {
-    if (base::FeatureList::IsEnabled(features::kWebLayerSafeBrowsing) &&
-        IsSafebrowsingSupported()) {
-      throttles.push_back(
-          GetSafeBrowsingService()->CreateSafeBrowsingNavigationThrottle(
-              handle));
-    }
-
-    throttles.push_back(
-        navigation_interception::InterceptNavigationDelegate::CreateThrottleFor(
-            handle, navigation_interception::SynchronyMode::kAsync));
   }
 #endif
   return throttles;
@@ -913,11 +902,6 @@ void ContentBrowserClientImpl::ExposeInt
       };
   registry->AddInterface(base::BindRepeating(create_spellcheck_host),
                          content::GetUIThreadTaskRunner({}));
-
-  if (base::FeatureList::IsEnabled(features::kWebLayerSafeBrowsing) &&
-      IsSafebrowsingSupported()) {
-    GetSafeBrowsingService()->AddInterface(registry, render_process_host);
-  }
 #endif  // defined(OS_ANDROID)
 }
 
--- a/weblayer/browser/safe_browsing/safe_browsing_blocking_page.cc
+++ b/weblayer/browser/safe_browsing/safe_browsing_blocking_page.cc
@@ -62,12 +62,8 @@ SafeBrowsingBlockingPage* SafeBrowsingBl
   security_interstitials::BaseSafeBrowsingErrorUI::SBErrorDisplayOptions
       display_options =
           BaseBlockingPage::CreateDefaultDisplayOptions(unsafe_resources);
-  display_options.is_extended_reporting_opt_in_allowed =
-      safe_browsing::IsExtendedReportingOptInAllowed(
-          *(browser_context->pref_service()));
-  display_options.is_extended_reporting_enabled =
-      safe_browsing::IsExtendedReportingEnabled(
-          *(browser_context->pref_service()));
+  display_options.is_extended_reporting_opt_in_allowed = false;
+  display_options.is_extended_reporting_enabled = false;
 
   // TODO(crbug.com/1080748): Set settings_page_helper once enhanced protection
   // is supported on weblayer.
--- a/weblayer/browser/safe_browsing/safe_browsing_service.cc
+++ b/weblayer/browser/safe_browsing/safe_browsing_service.cc
@@ -2,8 +2,6 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#include "weblayer/browser/safe_browsing/safe_browsing_service.h"
-
 #include <memory>
 
 #include "base/bind.h"
@@ -14,7 +12,6 @@
 #include "components/safe_browsing/content/browser/browser_url_loader_throttle.h"
 #include "components/safe_browsing/content/browser/mojo_safe_browsing_impl.h"
 #include "components/safe_browsing/core/browser/safe_browsing_network_context.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/realtime/url_lookup_service.h"
 #include "content/public/browser/browser_context.h"
 #include "content/public/browser/browser_task_traits.h"
@@ -60,10 +57,7 @@ void MaybeCreateSafeBrowsing(
   if (!render_process_host)
     return;
 
-  bool is_safe_browsing_enabled = safe_browsing::IsSafeBrowsingEnabled(
-      *static_cast<BrowserContextImpl*>(
-           render_process_host->GetBrowserContext())
-           ->pref_service());
+  bool is_safe_browsing_enabled = false;
 
   if (!is_safe_browsing_enabled)
     return;
@@ -77,196 +71,4 @@ void MaybeCreateSafeBrowsing(
 
 }  // namespace
 
-SafeBrowsingService::SafeBrowsingService(const std::string& user_agent)
-    : user_agent_(user_agent) {}
-
-SafeBrowsingService::~SafeBrowsingService() = default;
-
-void SafeBrowsingService::Initialize() {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-
-  if (network_context_) {
-    // already initialized
-    return;
-  }
-
-  safe_browsing_api_handler_ =
-      std::make_unique<safe_browsing::SafeBrowsingApiHandlerBridge>();
-  safe_browsing::SafeBrowsingApiHandler::SetInstance(
-      safe_browsing_api_handler_.get());
-
-  base::FilePath user_data_dir;
-  bool result =
-      base::PathService::Get(base::DIR_ANDROID_APP_DATA, &user_data_dir);
-  DCHECK(result);
-
-  // safebrowsing network context needs to be created on the UI thread.
-  network_context_ =
-      std::make_unique<safe_browsing::SafeBrowsingNetworkContext>(
-          user_data_dir,
-          base::BindRepeating(CreateDefaultNetworkContextParams, user_agent_));
-
-  CreateSafeBrowsingUIManager();
-}
-
-std::unique_ptr<blink::URLLoaderThrottle>
-SafeBrowsingService::CreateURLLoaderThrottle(
-    const base::RepeatingCallback<content::WebContents*()>& wc_getter,
-    int frame_tree_node_id,
-    safe_browsing::RealTimeUrlLookupServiceBase* url_lookup_service) {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-
-  return safe_browsing::BrowserURLLoaderThrottle::Create(
-      base::BindOnce(
-          [](SafeBrowsingService* sb_service) {
-            return sb_service->GetSafeBrowsingUrlCheckerDelegate();
-          },
-          base::Unretained(this)),
-      wc_getter, frame_tree_node_id,
-      url_lookup_service ? url_lookup_service->GetWeakPtr() : nullptr);
-}
-
-std::unique_ptr<content::NavigationThrottle>
-SafeBrowsingService::CreateSafeBrowsingNavigationThrottle(
-    content::NavigationHandle* handle) {
-  return std::make_unique<SafeBrowsingNavigationThrottle>(
-      handle, GetSafeBrowsingUIManager().get());
-}
-
-scoped_refptr<safe_browsing::UrlCheckerDelegate>
-SafeBrowsingService::GetSafeBrowsingUrlCheckerDelegate() {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::IO);
-
-  if (!safe_browsing_url_checker_delegate_) {
-    safe_browsing_url_checker_delegate_ = new UrlCheckerDelegateImpl(
-        GetSafeBrowsingDBManager(), GetSafeBrowsingUIManager());
-  }
-
-  return safe_browsing_url_checker_delegate_;
-}
-
-scoped_refptr<safe_browsing::RemoteSafeBrowsingDatabaseManager>
-SafeBrowsingService::GetSafeBrowsingDBManager() {
-  if (!safe_browsing_db_manager_) {
-    CreateAndStartSafeBrowsingDBManager();
-  }
-  return safe_browsing_db_manager_;
-}
-
-scoped_refptr<SafeBrowsingUIManager>
-SafeBrowsingService::GetSafeBrowsingUIManager() {
-  return ui_manager_;
-}
-
-void SafeBrowsingService::CreateSafeBrowsingUIManager() {
-  DCHECK(!ui_manager_);
-  ui_manager_ = new SafeBrowsingUIManager(this);
-}
-
-void SafeBrowsingService::CreateAndStartSafeBrowsingDBManager() {
-  DCHECK(!safe_browsing_db_manager_);
-
-  safe_browsing_db_manager_ =
-      new safe_browsing::RemoteSafeBrowsingDatabaseManager();
-
-  if (!content::BrowserThread::CurrentlyOn(content::BrowserThread::IO)) {
-    // Posting a task to start the DB here ensures that it will be started by
-    // the time that a consumer uses it on the IO thread, as such a consumer
-    // would need to make it available for usage on the IO thread via a
-    // PostTask() that will be ordered after this one.
-    content::GetIOThreadTaskRunner({})->PostTask(
-        FROM_HERE,
-        base::BindOnce(
-            &SafeBrowsingService::StartSafeBrowsingDBManagerOnIOThread,
-            base::Unretained(this)));
-  } else {
-    StartSafeBrowsingDBManagerOnIOThread();
-  }
-}
-
-void SafeBrowsingService::StartSafeBrowsingDBManagerOnIOThread() {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::IO);
-  DCHECK(safe_browsing_db_manager_);
-
-  if (started_db_manager_)
-    return;
-
-  started_db_manager_ = true;
-
-  // V4ProtocolConfig is not used. Just create one with empty values.
-  safe_browsing::V4ProtocolConfig config("", false, "", "");
-  safe_browsing_db_manager_->StartOnIOThread(GetURLLoaderFactoryOnIOThread(),
-                                             config);
-}
-
-scoped_refptr<network::SharedURLLoaderFactory>
-SafeBrowsingService::GetURLLoaderFactoryOnIOThread() {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::IO);
-  if (!shared_url_loader_factory_on_io_) {
-    content::GetUIThreadTaskRunner({})->PostTask(
-        FROM_HERE,
-        base::BindOnce(&SafeBrowsingService::CreateURLLoaderFactoryForIO,
-                       base::Unretained(this),
-                       url_loader_factory_on_io_.BindNewPipeAndPassReceiver()));
-    shared_url_loader_factory_on_io_ =
-        base::MakeRefCounted<network::WeakWrapperSharedURLLoaderFactory>(
-            url_loader_factory_on_io_.get());
-  }
-  return shared_url_loader_factory_on_io_;
-}
-
-void SafeBrowsingService::CreateURLLoaderFactoryForIO(
-    mojo::PendingReceiver<network::mojom::URLLoaderFactory> receiver) {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-  auto url_loader_factory_params =
-      network::mojom::URLLoaderFactoryParams::New();
-  url_loader_factory_params->process_id = network::mojom::kBrowserProcessId;
-  url_loader_factory_params->is_corb_enabled = false;
-  network_context_->GetNetworkContext()->CreateURLLoaderFactory(
-      std::move(receiver), std::move(url_loader_factory_params));
-}
-
-void SafeBrowsingService::AddInterface(
-    service_manager::BinderRegistry* registry,
-    content::RenderProcessHost* render_process_host) {
-  content::ResourceContext* resource_context =
-      render_process_host->GetBrowserContext()->GetResourceContext();
-  registry->AddInterface(
-      base::BindRepeating(
-          &MaybeCreateSafeBrowsing, render_process_host->GetID(),
-          resource_context,
-          base::BindRepeating(
-              &SafeBrowsingService::GetSafeBrowsingUrlCheckerDelegate,
-              base::Unretained(this))),
-      content::GetUIThreadTaskRunner({}));
-}
-
-void SafeBrowsingService::StopDBManager() {
-  content::GetIOThreadTaskRunner({})->PostTask(
-      FROM_HERE, base::BindOnce(&SafeBrowsingService::StopDBManagerOnIOThread,
-                                base::Unretained(this)));
-}
-
-void SafeBrowsingService::StopDBManagerOnIOThread() {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::IO);
-  if (safe_browsing_db_manager_) {
-    safe_browsing_db_manager_->StopOnIOThread(true /*shutdown*/);
-    safe_browsing_db_manager_.reset();
-    started_db_manager_ = false;
-  }
-}
-
-network::mojom::NetworkContext* SafeBrowsingService::GetNetworkContext() {
-  if (!network_context_)
-    return nullptr;
-  return network_context_->GetNetworkContext();
-}
-
-scoped_refptr<network::SharedURLLoaderFactory>
-SafeBrowsingService::GetURLLoaderFactory() {
-  if (!network_context_)
-    return nullptr;
-  return network_context_->GetURLLoaderFactory();
-}
-
 }  // namespace weblayer
--- a/weblayer/browser/profile_impl.cc
+++ b/weblayer/browser/profile_impl.cc
@@ -49,7 +49,6 @@
 #include "base/android/jni_array.h"
 #include "base/android/jni_string.h"
 #include "base/android/scoped_java_ref.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/unified_consent/pref_names.h"
 #include "ui/gfx/android/java_bitmap.h"
 #include "weblayer/browser/android/metrics/weblayer_metrics_service_client.h"
@@ -640,11 +639,6 @@ void ProfileImpl::SetBooleanSetting(Sett
   auto* pref_service = GetBrowserContext()->pref_service();
   switch (type) {
     case SettingType::BASIC_SAFE_BROWSING_ENABLED:
-#if defined(OS_ANDROID)
-      safe_browsing::SetSafeBrowsingState(
-          pref_service, value ? safe_browsing::STANDARD_PROTECTION
-                              : safe_browsing::NO_SAFE_BROWSING);
-#endif
       break;
     case SettingType::UKM_ENABLED: {
 #if defined(OS_ANDROID)
@@ -659,10 +653,6 @@ void ProfileImpl::SetBooleanSetting(Sett
       break;
     }
     case SettingType::EXTENDED_REPORTING_SAFE_BROWSING_ENABLED:
-#if defined(OS_ANDROID)
-      pref_service->SetBoolean(::prefs::kSafeBrowsingScoutReportingEnabled,
-                               value);
-#endif
       break;
     case SettingType::REAL_TIME_SAFE_BROWSING_ENABLED:
 #if defined(OS_ANDROID)
@@ -681,16 +671,12 @@ bool ProfileImpl::GetBooleanSetting(Sett
   switch (type) {
     case SettingType::BASIC_SAFE_BROWSING_ENABLED:
 #if defined(OS_ANDROID)
-      return safe_browsing::IsSafeBrowsingEnabled(*pref_service);
+      return false;
 #endif
       return false;
     case SettingType::UKM_ENABLED:
       return pref_service->GetBoolean(prefs::kUkmEnabled);
     case SettingType::EXTENDED_REPORTING_SAFE_BROWSING_ENABLED:
-#if defined(OS_ANDROID)
-      return pref_service->GetBoolean(
-          ::prefs::kSafeBrowsingScoutReportingEnabled);
-#endif
       return false;
     case SettingType::REAL_TIME_SAFE_BROWSING_ENABLED:
 #if defined(OS_ANDROID)
--- a/weblayer/browser/browser_process.cc
+++ b/weblayer/browser/browser_process.cc
@@ -122,20 +122,9 @@ void BrowserProcess::CreateSubresourceFi
 
 #if defined(OS_ANDROID)
 SafeBrowsingService* BrowserProcess::GetSafeBrowsingService() {
-  if (!safe_browsing_service_) {
-    // Create and initialize safe_browsing_service on first get.
-    // Note: Initialize() needs to happen on UI thread.
-    safe_browsing_service_ =
-        std::make_unique<SafeBrowsingService>(embedder_support::GetUserAgent());
-    safe_browsing_service_->Initialize();
-  }
-  return safe_browsing_service_.get();
 }
 
 void BrowserProcess::StopSafeBrowsingService() {
-  if (safe_browsing_service_) {
-    safe_browsing_service_->StopDBManager();
-  }
 }
 #endif
 
--- a/weblayer/browser/browser_process.h
+++ b/weblayer/browser/browser_process.h
@@ -78,10 +78,6 @@ class BrowserProcess {
   std::unique_ptr<subresource_filter::RulesetService>
       subresource_filter_ruleset_service_;
 
-#if defined(OS_ANDROID)
-  std::unique_ptr<SafeBrowsingService> safe_browsing_service_;
-#endif
-
   SEQUENCE_CHECKER(sequence_checker_);
 
   DISALLOW_COPY_AND_ASSIGN(BrowserProcess);
--- a/chrome/browser/safe_browsing/android/BUILD.gn
+++ b/chrome/browser/safe_browsing/android/BUILD.gn
@@ -104,7 +104,6 @@ android_resources("java_resources") {
 
 java_cpp_enum("safe_browsing_enums") {
   sources = [
-    "//components/safe_browsing/core/common/safe_browsing_prefs.h",
     "//components/safe_browsing/core/common/safe_browsing_settings_metrics.h",
   ]
 }
--- a/chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingBridge.java
+++ b/chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingBridge.java
@@ -19,44 +19,42 @@ public final class SafeBrowsingBridge {
      * @return The UMA value for the file.
      */
     public static int umaValueForFile(String path) {
-        return SafeBrowsingBridgeJni.get().umaValueForFile(path);
+        return 0;
     }
 
     /**
      * @return Whether Safe Browsing Extended Reporting is currently enabled.
      */
     public static boolean isSafeBrowsingExtendedReportingEnabled() {
-        return SafeBrowsingBridgeJni.get().getSafeBrowsingExtendedReportingEnabled();
+        return false;
     }
 
     /**
      * @param enabled Whether Safe Browsing Extended Reporting should be enabled.
      */
     public static void setSafeBrowsingExtendedReportingEnabled(boolean enabled) {
-        SafeBrowsingBridgeJni.get().setSafeBrowsingExtendedReportingEnabled(enabled);
     }
 
     /**
      * @return Whether Safe Browsing Extended Reporting is managed
      */
     public static boolean isSafeBrowsingExtendedReportingManaged() {
-        return SafeBrowsingBridgeJni.get().getSafeBrowsingExtendedReportingManaged();
+        return false;
     }
 
     /**
      * @return The Safe Browsing state. It can be Enhanced Protection, Standard Protection, or No
      *         Protection.
      */
-    public static @SafeBrowsingState int getSafeBrowsingState() {
-        return SafeBrowsingBridgeJni.get().getSafeBrowsingState();
+    public static int getSafeBrowsingState() {
+        return 0;
     }
 
     /**
      * @param state Set the Safe Browsing state. It can be Enhanced Protection, Standard Protection,
      *         or No Protection.
      */
-    public static void setSafeBrowsingState(@SafeBrowsingState int state) {
-        SafeBrowsingBridgeJni.get().setSafeBrowsingState(state);
+    public static void setSafeBrowsingState(int state) {
     }
 
     /**
@@ -64,26 +62,13 @@ public final class SafeBrowsingBridge {
      * the SafeBrowsingEnabled policy(legacy) or the SafeBrowsingProtectionLevel policy(new).
      */
     public static boolean isSafeBrowsingManaged() {
-        return SafeBrowsingBridgeJni.get().isSafeBrowsingManaged();
+        return false;
     }
 
     /**
      * @return Whether there is a Google account to use for the leak detection check.
      */
     public static boolean hasAccountForLeakCheckRequest() {
-        return SafeBrowsingBridgeJni.get().hasAccountForLeakCheckRequest();
-    }
-
-    @NativeMethods
-    interface Natives {
-        int umaValueForFile(String path);
-        boolean getSafeBrowsingExtendedReportingEnabled();
-        void setSafeBrowsingExtendedReportingEnabled(boolean enabled);
-        boolean getSafeBrowsingExtendedReportingManaged();
-        @SafeBrowsingState
-        int getSafeBrowsingState();
-        void setSafeBrowsingState(@SafeBrowsingState int state);
-        boolean hasAccountForLeakCheckRequest();
-        boolean isSafeBrowsingManaged();
+        return false;
     }
 }
--- a/chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/settings/RadioButtonGroupSafeBrowsingPreference.java
+++ b/chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/settings/RadioButtonGroupSafeBrowsingPreference.java
@@ -15,7 +15,6 @@ import androidx.core.content.ContextComp
 import androidx.preference.Preference;
 import androidx.preference.PreferenceViewHolder;
 
-import org.chromium.chrome.browser.safe_browsing.SafeBrowsingState;
 import org.chromium.chrome.browser.safe_browsing.metrics.SettingsAccessPoint;
 import org.chromium.components.browser_ui.settings.ManagedPreferenceDelegate;
 import org.chromium.components.browser_ui.settings.ManagedPreferencesUtils;
@@ -47,13 +46,13 @@ public class RadioButtonGroupSafeBrowsin
          * Notify that details of a Safe Browsing mode are requested.
          * @param safeBrowsingState The Safe Browsing mode that is requested for more details.
          */
-        void onSafeBrowsingModeDetailsRequested(@SafeBrowsingState int safeBrowsingState);
+        void onSafeBrowsingModeDetailsRequested(int safeBrowsingState);
     }
 
     private @Nullable RadioButtonWithDescriptionAndAuxButton mEnhancedProtection;
     private RadioButtonWithDescriptionAndAuxButton mStandardProtection;
     private RadioButtonWithDescription mNoProtection;
-    private @SafeBrowsingState int mSafeBrowsingState;
+    private int mSafeBrowsingState;
     private @SettingsAccessPoint int mAccessPoint;
     private OnSafeBrowsingModeDetailsRequested mSafeBrowsingModeDetailsRequestedListener;
     private ManagedPreferenceDelegate mManagedPrefDelegate;
@@ -69,22 +68,14 @@ public class RadioButtonGroupSafeBrowsin
      * @param accessPoint Where this preference was triggered to be created.
      */
     public void init(
-            @SafeBrowsingState int safeBrowsingState, @SettingsAccessPoint int accessPoint) {
+            int safeBrowsingState, @SettingsAccessPoint int accessPoint) {
         mSafeBrowsingState = safeBrowsingState;
         mAccessPoint = accessPoint;
     }
 
     @Override
     public void onCheckedChanged(RadioGroup group, int checkedId) {
-        if (checkedId == mEnhancedProtection.getId()) {
-            mSafeBrowsingState = SafeBrowsingState.ENHANCED_PROTECTION;
-        } else if (checkedId == mStandardProtection.getId()) {
-            mSafeBrowsingState = SafeBrowsingState.STANDARD_PROTECTION;
-        } else if (checkedId == mNoProtection.getId()) {
-            mSafeBrowsingState = SafeBrowsingState.NO_SAFE_BROWSING;
-        } else {
-            assert false : "Should not be reached.";
-        }
+        mSafeBrowsingState = 0;
         callChangeListener(mSafeBrowsingState);
     }
 
@@ -123,11 +114,7 @@ public class RadioButtonGroupSafeBrowsin
         assert mSafeBrowsingModeDetailsRequestedListener
                 != null : "The listener should be set if the aux button is clickable.";
         if (clickedButtonId == mEnhancedProtection.getId()) {
-            mSafeBrowsingModeDetailsRequestedListener.onSafeBrowsingModeDetailsRequested(
-                    SafeBrowsingState.ENHANCED_PROTECTION);
         } else if (clickedButtonId == mStandardProtection.getId()) {
-            mSafeBrowsingModeDetailsRequestedListener.onSafeBrowsingModeDetailsRequested(
-                    SafeBrowsingState.STANDARD_PROTECTION);
         } else {
             assert false : "Should not be reached.";
         }
@@ -156,15 +143,12 @@ public class RadioButtonGroupSafeBrowsin
      * @param checkedState Set the radio button of checkedState to checked, and set the radio
      *         buttons of other states to unchecked.
      */
-    public void setCheckedState(@SafeBrowsingState int checkedState) {
+    public void setCheckedState(int checkedState) {
         mSafeBrowsingState = checkedState;
-        mEnhancedProtection.setChecked(checkedState == SafeBrowsingState.ENHANCED_PROTECTION);
-        mStandardProtection.setChecked(checkedState == SafeBrowsingState.STANDARD_PROTECTION);
-        mNoProtection.setChecked(checkedState == SafeBrowsingState.NO_SAFE_BROWSING);
     }
 
     @VisibleForTesting
-    public @SafeBrowsingState int getSafeBrowsingStateForTesting() {
+    public int getSafeBrowsingStateForTesting() {
         return mSafeBrowsingState;
     }
 
--- a/chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/settings/StandardProtectionSettingsFragment.java
+++ b/chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/settings/StandardProtectionSettingsFragment.java
@@ -12,7 +12,6 @@ import androidx.preference.Preference;
 import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.safe_browsing.SafeBrowsingBridge;
-import org.chromium.chrome.browser.safe_browsing.SafeBrowsingState;
 import org.chromium.chrome.browser.settings.ChromeManagedPreferenceDelegate;
 import org.chromium.components.browser_ui.settings.ChromeSwitchPreference;
 import org.chromium.components.browser_ui.settings.ManagedPreferenceDelegate;
@@ -62,12 +61,9 @@ public class StandardProtectionSettingsF
      * forced enabled in ENHANCED_PROTECTION mode and forced disabled in NO_SAFE_BROWSING mode.
      */
     private void updateLeakDetectionAndExtendedReportingPreferences() {
-        @SafeBrowsingState
         int safe_browsing_state = SafeBrowsingBridge.getSafeBrowsingState();
-        boolean is_enhanced_protection =
-                safe_browsing_state == SafeBrowsingState.ENHANCED_PROTECTION;
-        boolean is_standard_protection =
-                safe_browsing_state == SafeBrowsingState.STANDARD_PROTECTION;
+        boolean is_enhanced_protection = false;
+        boolean is_standard_protection = false;
 
         boolean extended_reporting_checked = is_enhanced_protection
                 || (is_standard_protection
--- a/chrome/android/java/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoUtils.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoUtils.java
@@ -64,9 +64,7 @@ final class EnhancedProtectionPromoUtils
                 "MaxEnhancedProtectionPromoImpressions", DEFAULT_MAX_IMPRESSION_SEEN);
         // TODO(bdea): If the user has pressed "Continue" and not selected Enhanced Protection,
         // should we still show the promo.
-        return (profile != null) && !UserPrefs.get(profile).getBoolean(Pref.SAFE_BROWSING_ENHANCED)
-                && !isPromoDismissedInSharedPreference() && (timesSeen <= maxImpressions)
-                && !SafeBrowsingBridge.isSafeBrowsingManaged();
+        return false;
     }
 
     static boolean isPromoDismissedInSharedPreference() {
--- a/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/SignInPreference.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/SignInPreference.java
@@ -124,11 +124,7 @@ public class SignInPreference
                         .getSigninManager(Profile.getLastUsedRegularProfile())
                         .isSigninDisabledByPolicy()) {
             // TODO(https://crbug.com/1133739): Clean up after revising isSigninDisabledByPolicy.
-            if (mPrefService.isManagedPreference(Pref.SIGNIN_ALLOWED)) {
-                setupSigninDisabledByPolicy();
-            } else {
-                setupSigninDisallowed();
-            }
+            setupSigninDisallowed();
             return;
         }
 
--- a/chrome/android/java/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoController.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoController.java
@@ -16,8 +16,6 @@ import androidx.appcompat.content.res.Ap
 import org.chromium.chrome.R;
 import org.chromium.chrome.browser.ntp.cards.promo.enhanced_protection.EnhancedProtectionPromoUtils.EnhancedProtectionPromoAction;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.safe_browsing.metrics.SettingsAccessPoint;
-import org.chromium.chrome.browser.safe_browsing.settings.SafeBrowsingSettingsFragment;
 import org.chromium.chrome.browser.settings.SettingsLauncherImpl;
 import org.chromium.components.browser_ui.settings.SettingsLauncher;
 import org.chromium.components.browser_ui.widget.promo.PromoCardCoordinator;
@@ -173,10 +171,6 @@ public class EnhancedProtectionPromoCont
     private void onPrimaryButtonClicked() {
         EnhancedProtectionPromoUtils.recordEnhancedProtectionPromoEvent(
                 EnhancedProtectionPromoAction.ACCEPTED);
-        SettingsLauncher launcher = new SettingsLauncherImpl();
-        launcher.launchSettingsActivity(mContext, SafeBrowsingSettingsFragment.class,
-                SafeBrowsingSettingsFragment.createArguments(
-                        SettingsAccessPoint.SURFACE_EXPLORER_PROMO_SLINGER));
     }
 
     private void onPromoSeen() {
--- a/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
@@ -23,8 +23,6 @@ import org.chromium.chrome.browser.priva
 import org.chromium.chrome.browser.privacy_sandbox.PrivacySandboxReferrer;
 import org.chromium.chrome.browser.privacy_sandbox.PrivacySandboxSettingsFragment;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.safe_browsing.metrics.SettingsAccessPoint;
-import org.chromium.chrome.browser.safe_browsing.settings.SafeBrowsingSettingsFragment;
 import org.chromium.chrome.browser.settings.ChromeManagedPreferenceDelegate;
 import org.chromium.chrome.browser.settings.SettingsLauncherImpl;
 import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
@@ -83,11 +81,7 @@ public class PrivacySettings
         }
 
         Preference safeBrowsingPreference = findPreference(PREF_SAFE_BROWSING);
-        safeBrowsingPreference.setSummary(
-                SafeBrowsingSettingsFragment.getSafeBrowsingSummaryString(getContext()));
         safeBrowsingPreference.setOnPreferenceClickListener((preference) -> {
-            preference.getExtras().putInt(
-                    SafeBrowsingSettingsFragment.ACCESS_POINT, SettingsAccessPoint.PARENT_SETTINGS);
             return false;
         });
 
@@ -185,8 +179,6 @@ public class PrivacySettings
 
         Preference safeBrowsingPreference = findPreference(PREF_SAFE_BROWSING);
         if (safeBrowsingPreference != null && safeBrowsingPreference.isVisible()) {
-            safeBrowsingPreference.setSummary(
-                    SafeBrowsingSettingsFragment.getSafeBrowsingSummaryString(getContext()));
         }
 
         Preference usageStatsPref = findPreference(PREF_USAGE_STATS);
--- a/chrome/android/java/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingSettingsLauncher.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingSettingsLauncher.java
@@ -6,8 +6,6 @@ package org.chromium.chrome.browser.safe
 import android.content.Context;
 
 import org.chromium.base.annotations.CalledByNative;
-import org.chromium.chrome.browser.safe_browsing.metrics.SettingsAccessPoint;
-import org.chromium.chrome.browser.safe_browsing.settings.SafeBrowsingSettingsFragment;
 import org.chromium.chrome.browser.settings.SettingsLauncherImpl;
 import org.chromium.components.browser_ui.settings.SettingsLauncher;
 import org.chromium.content_public.browser.WebContents;
@@ -23,10 +21,5 @@ public class SafeBrowsingSettingsLaunche
     private static void showSafeBrowsingSettings(WebContents webContents) {
         WindowAndroid window = webContents.getTopLevelNativeWindow();
         if (window == null) return;
-        Context currentContext = window.getContext().get();
-        SettingsLauncher settingsLauncher = new SettingsLauncherImpl();
-        settingsLauncher.launchSettingsActivity(currentContext, SafeBrowsingSettingsFragment.class,
-                SafeBrowsingSettingsFragment.createArguments(
-                        SettingsAccessPoint.SECURITY_INTERSTITIAL));
     }
 }
--- a/chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/settings/SafeBrowsingSettingsFragment.java
+++ b/chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/settings/SafeBrowsingSettingsFragment.java
@@ -13,10 +13,6 @@ import androidx.preference.Preference;
 import org.chromium.base.IntentUtils;
 import org.chromium.base.metrics.RecordHistogram;
 import org.chromium.base.metrics.RecordUserAction;
-import org.chromium.chrome.browser.safe_browsing.SafeBrowsingBridge;
-import org.chromium.chrome.browser.safe_browsing.SafeBrowsingState;
-import org.chromium.chrome.browser.safe_browsing.metrics.SettingsAccessPoint;
-import org.chromium.chrome.browser.safe_browsing.metrics.UserAction;
 import org.chromium.chrome.browser.settings.ChromeManagedPreferenceDelegate;
 import org.chromium.components.browser_ui.settings.FragmentSettingsLauncher;
 import org.chromium.components.browser_ui.settings.ManagedPreferenceDelegate;
@@ -39,26 +35,12 @@ public class SafeBrowsingSettingsFragmen
     // An instance of SettingsLauncher that is used to launch Safe Browsing subsections.
     private SettingsLauncher mSettingsLauncher;
     private RadioButtonGroupSafeBrowsingPreference mSafeBrowsingPreference;
-    private @SettingsAccessPoint int mAccessPoint;
 
     /**
      * @return A summary that describes the current Safe Browsing state.
      */
     public static String getSafeBrowsingSummaryString(Context context) {
-        @SafeBrowsingState
-        int safeBrowsingState = SafeBrowsingBridge.getSafeBrowsingState();
         String safeBrowsingStateString = "";
-        if (safeBrowsingState == SafeBrowsingState.ENHANCED_PROTECTION) {
-            safeBrowsingStateString =
-                    context.getString(R.string.safe_browsing_enhanced_protection_title);
-        } else if (safeBrowsingState == SafeBrowsingState.STANDARD_PROTECTION) {
-            safeBrowsingStateString =
-                    context.getString(R.string.safe_browsing_standard_protection_title);
-        } else if (safeBrowsingState == SafeBrowsingState.NO_SAFE_BROWSING) {
-            return context.getString(R.string.prefs_safe_browsing_no_protection_summary);
-        } else {
-            assert false : "Should not be reached";
-        }
         return context.getString(R.string.prefs_safe_browsing_summary, safeBrowsingStateString);
     }
 
@@ -66,7 +48,7 @@ public class SafeBrowsingSettingsFragmen
      * Creates an argument bundle to open the Safe Browsing settings page.
      * @param accessPoint The access point for opening the Safe Browsing settings page.
      */
-    public static Bundle createArguments(@SettingsAccessPoint int accessPoint) {
+    public static Bundle createArguments(int accessPoint) {
         Bundle result = new Bundle();
         result.putInt(ACCESS_POINT, accessPoint);
         return result;
@@ -74,24 +56,6 @@ public class SafeBrowsingSettingsFragmen
 
     @Override
     protected void onCreatePreferencesInternal(Bundle bundle, String s) {
-        mAccessPoint =
-                IntentUtils.safeGetInt(getArguments(), ACCESS_POINT, SettingsAccessPoint.DEFAULT);
-
-        ManagedPreferenceDelegate managedPreferenceDelegate = createManagedPreferenceDelegate();
-
-        mSafeBrowsingPreference = findPreference(PREF_SAFE_BROWSING);
-        mSafeBrowsingPreference.init(SafeBrowsingBridge.getSafeBrowsingState(),
-                mAccessPoint);
-        mSafeBrowsingPreference.setSafeBrowsingModeDetailsRequestedListener(this);
-        mSafeBrowsingPreference.setManagedPreferenceDelegate(managedPreferenceDelegate);
-        mSafeBrowsingPreference.setOnPreferenceChangeListener(this);
-
-        TextMessagePreference textManaged = findPreference(PREF_TEXT_MANAGED);
-        textManaged.setManagedPreferenceDelegate(managedPreferenceDelegate);
-        textManaged.setVisible(managedPreferenceDelegate.isPreferenceClickDisabledByPolicy(
-                mSafeBrowsingPreference));
-
-        recordUserActionHistogram(UserAction.SHOWED);
     }
 
     @Override
@@ -100,17 +64,8 @@ public class SafeBrowsingSettingsFragmen
     }
 
     @Override
-    public void onSafeBrowsingModeDetailsRequested(@SafeBrowsingState int safeBrowsingState) {
+    public void onSafeBrowsingModeDetailsRequested(int safeBrowsingState) {
         recordUserActionHistogramForStateDetailsClicked(safeBrowsingState);
-        if (safeBrowsingState == SafeBrowsingState.ENHANCED_PROTECTION) {
-            mSettingsLauncher.launchSettingsActivity(
-                    getActivity(), EnhancedProtectionSettingsFragment.class);
-        } else if (safeBrowsingState == SafeBrowsingState.STANDARD_PROTECTION) {
-            mSettingsLauncher.launchSettingsActivity(
-                    getActivity(), StandardProtectionSettingsFragment.class);
-        } else {
-            assert false : "Should not be reached";
-        }
     }
 
     @Override
@@ -120,12 +75,6 @@ public class SafeBrowsingSettingsFragmen
 
     private ChromeManagedPreferenceDelegate createManagedPreferenceDelegate() {
         return preference -> {
-            String key = preference.getKey();
-            if (PREF_TEXT_MANAGED.equals(key) || PREF_SAFE_BROWSING.equals(key)) {
-                return SafeBrowsingBridge.isSafeBrowsingManaged();
-            } else {
-                assert false : "Should not be reached.";
-            }
             return false;
         };
     }
@@ -134,131 +83,30 @@ public class SafeBrowsingSettingsFragmen
     public boolean onPreferenceChange(Preference preference, Object newValue) {
         String key = preference.getKey();
         assert PREF_SAFE_BROWSING.equals(key) : "Unexpected preference key.";
-        @SafeBrowsingState
-        int newState = (int) newValue;
-        @SafeBrowsingState
-        int currentState = SafeBrowsingBridge.getSafeBrowsingState();
-        if (newState == currentState) {
-            return true;
-        }
-        recordUserActionHistogramForNewStateClicked(newState);
-        // If the user selects no protection from another Safe Browsing state, show a confirmation
-        // dialog to double check if they want to select no protection.
-        if (newState == SafeBrowsingState.NO_SAFE_BROWSING) {
-            // The user hasn't confirmed to select no protection, keep the radio button / UI checked
-            // state at the currently selected level.
-            mSafeBrowsingPreference.setCheckedState(currentState);
-            NoProtectionConfirmationDialog
-                    .create(getContext(),
-                            (didConfirm) -> {
-                                recordUserActionHistogramForNoProtectionConfirmation(didConfirm);
-                                if (didConfirm) {
-                                    // The user has confirmed to select no protection, set Safe
-                                    // Browsing pref to no protection, and change the radio button /
-                                    // UI checked state to no protection.
-                                    SafeBrowsingBridge.setSafeBrowsingState(
-                                            SafeBrowsingState.NO_SAFE_BROWSING);
-                                    mSafeBrowsingPreference.setCheckedState(
-                                            SafeBrowsingState.NO_SAFE_BROWSING);
-                                }
-                                // No-ops if the user denies.
-                            })
-                    .show();
-        } else {
-            SafeBrowsingBridge.setSafeBrowsingState(newState);
-        }
         return true;
     }
 
     private void recordUserActionHistogramForNewStateClicked(
-            @SafeBrowsingState int safeBrowsingState) {
-        switch (safeBrowsingState) {
-            case (SafeBrowsingState.ENHANCED_PROTECTION):
-                recordUserActionHistogram(UserAction.ENHANCED_PROTECTION_CLICKED);
-                break;
-            case (SafeBrowsingState.STANDARD_PROTECTION):
-                recordUserActionHistogram(UserAction.STANDARD_PROTECTION_CLICKED);
-                break;
-            case (SafeBrowsingState.NO_SAFE_BROWSING):
-                recordUserActionHistogram(UserAction.DISABLE_SAFE_BROWSING_CLICKED);
-                break;
-            default:
-                assert false : "Should not be reached.";
-        }
+            int safeBrowsingState) {
     }
 
     private void recordUserActionHistogramForStateDetailsClicked(
-            @SafeBrowsingState int safeBrowsingState) {
-        switch (safeBrowsingState) {
-            case (SafeBrowsingState.ENHANCED_PROTECTION):
-                recordUserActionHistogram(UserAction.ENHANCED_PROTECTION_EXPAND_ARROW_CLICKED);
-                break;
-            case (SafeBrowsingState.STANDARD_PROTECTION):
-                recordUserActionHistogram(UserAction.STANDARD_PROTECTION_EXPAND_ARROW_CLICKED);
-                break;
-            default:
-                assert false : "Should not be reached.";
-        }
+            int safeBrowsingState) {
     }
 
     private void recordUserActionHistogramForNoProtectionConfirmation(boolean didConfirm) {
-        if (didConfirm) {
-            recordUserActionHistogram(UserAction.DISABLE_SAFE_BROWSING_DIALOG_CONFIRMED);
-        } else {
-            recordUserActionHistogram(UserAction.DISABLE_SAFE_BROWSING_DIALOG_DENIED);
-        }
     }
 
-    private void recordUserActionHistogram(@UserAction int userAction) {
+    private void recordUserActionHistogram(int userAction) {
         String metricsSuffix;
         // The metricsSuffix string shouldn't be changed. When adding a new access point, please
         // also update the "SafeBrowsing.Settings.AccessPoint" histogram suffix in the
         // histograms.xml file.
-        if (mAccessPoint == SettingsAccessPoint.PARENT_SETTINGS) {
-            metricsSuffix = "ParentSettings";
-        } else if (mAccessPoint == SettingsAccessPoint.SAFETY_CHECK) {
-            metricsSuffix = "SafetyCheck";
-        } else if (mAccessPoint == SettingsAccessPoint.SURFACE_EXPLORER_PROMO_SLINGER) {
-            metricsSuffix = "SurfaceExplorerPromoSlinger";
-        } else if (mAccessPoint == SettingsAccessPoint.SECURITY_INTERSTITIAL) {
-            metricsSuffix = "SecurityInterstitial";
-        } else {
-            metricsSuffix = "Default";
-        }
-        RecordHistogram.recordEnumeratedHistogram(
-                "SafeBrowsing.Settings.UserAction." + metricsSuffix, userAction,
-                UserAction.MAX_VALUE + 1);
+        metricsSuffix = "Default";
 
         String userActionSuffix;
-        switch (userAction) {
-            case UserAction.SHOWED:
-                userActionSuffix = "ShowedFrom" + metricsSuffix;
-                break;
-            case UserAction.ENHANCED_PROTECTION_CLICKED:
-                userActionSuffix = "EnhancedProtectionClicked";
-                break;
-            case UserAction.STANDARD_PROTECTION_CLICKED:
-                userActionSuffix = "StandardProtectionClicked";
-                break;
-            case UserAction.DISABLE_SAFE_BROWSING_CLICKED:
-                userActionSuffix = "DisableSafeBrowsingClicked";
-                break;
-            case UserAction.ENHANCED_PROTECTION_EXPAND_ARROW_CLICKED:
-                userActionSuffix = "EnhancedProtectionExpandArrowClicked";
-                break;
-            case UserAction.STANDARD_PROTECTION_EXPAND_ARROW_CLICKED:
-                userActionSuffix = "StandardProtectionExpandArrowClicked";
-                break;
-            case UserAction.DISABLE_SAFE_BROWSING_DIALOG_CONFIRMED:
-                userActionSuffix = "DisableSafeBrowsingDialogConfirmed";
-                break;
-            case UserAction.DISABLE_SAFE_BROWSING_DIALOG_DENIED:
-                userActionSuffix = "DisableSafeBrowsingDialogDenied";
-                break;
-            default:
-                assert false : "Should not be reached.";
-                userActionSuffix = "";
-        }
+        userActionSuffix = "";
+
         RecordUserAction.record("SafeBrowsing.Settings." + userActionSuffix);
     }
 }
--- a/chrome/browser/password_manager/chrome_password_manager_client.cc
+++ b/chrome/browser/password_manager/chrome_password_manager_client.cc
@@ -442,7 +442,9 @@ void ChromePasswordManagerClient::ShowTo
 #if defined(OS_ANDROID)
 void ChromePasswordManagerClient::OnPasswordSelected(
     const std::u16string& text) {
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   password_reuse_detection_manager_.OnPaste(text);
+#endif
 }
 #endif
 
--- a/weblayer/browser/browsing_data_remover_delegate.cc
+++ b/weblayer/browser/browsing_data_remover_delegate.cc
@@ -96,7 +96,7 @@ void BrowsingDataRemoverDelegate::Remove
   // between UNPROTECTED_WEB and PROTECTED_WEB.
   if (remove_mask & content::BrowsingDataRemover::DATA_TYPE_COOKIES) {
     network::mojom::NetworkContext* safe_browsing_context = nullptr;
-#if defined(OS_ANDROID)
+#if !defined(OS_ANDROID)
     auto* sb_service = BrowserProcess::GetInstance()->GetSafeBrowsingService();
     if (sb_service)
       safe_browsing_context = sb_service->GetNetworkContext();
--- a/components/safe_browsing/content/browser/client_side_detection_service.cc
+++ b/components/safe_browsing/content/browser/client_side_detection_service.cc
@@ -81,18 +81,7 @@ ClientSideDetectionService::ClientSideDe
   url_loader_factory_ = delegate_->GetSafeBrowsingURLLoaderFactory();
 
   pref_change_registrar_.Init(delegate_->GetPrefs());
-  pref_change_registrar_.Add(
-      prefs::kSafeBrowsingEnabled,
-      base::BindRepeating(&ClientSideDetectionService::OnPrefsUpdated,
-                          base::Unretained(this)));
-  pref_change_registrar_.Add(
-      prefs::kSafeBrowsingEnhanced,
-      base::BindRepeating(&ClientSideDetectionService::OnPrefsUpdated,
-                          base::Unretained(this)));
-  pref_change_registrar_.Add(
-      prefs::kSafeBrowsingScoutReportingEnabled,
-      base::BindRepeating(&ClientSideDetectionService::OnPrefsUpdated,
-                          base::Unretained(this)));
+
   // Do an initial check of the prefs.
   OnPrefsUpdated();
 }
@@ -107,10 +96,9 @@ void ClientSideDetectionService::Shutdow
 
 void ClientSideDetectionService::OnPrefsUpdated() {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  bool enabled = IsSafeBrowsingEnabled(*delegate_->GetPrefs());
+  bool enabled = false;
   bool extended_reporting =
-      IsEnhancedProtectionEnabled(*delegate_->GetPrefs()) ||
-      IsExtendedReportingEnabled(*delegate_->GetPrefs());
+      false;
   if (enabled == enabled_ && extended_reporting_ == extended_reporting)
     return;
 
@@ -207,10 +195,7 @@ void ClientSideDetectionService::StartCl
     return;
   }
 
-#if 1
-  if (!callback.is_null())
-    callback.Run(GURL(request->url()), false);
-#else
+#if 0
   // Fill in metadata about which model we used.
   *request->mutable_population() = delegate_->GetUserPopulation();
 
@@ -407,7 +392,6 @@ void ClientSideDetectionService::AddPhis
   base::ListValue time_list;
   for (const base::Time& timestamp : phishing_report_times_)
     time_list.Append(base::Value(timestamp.ToDoubleT()));
-  delegate_->GetPrefs()->Set(prefs::kSafeBrowsingCsdPingTimestamps, time_list);
 }
 
 void ClientSideDetectionService::LoadPhishingReportTimesFromPrefs() {
@@ -415,13 +399,6 @@ void ClientSideDetectionService::LoadPhi
     return;
 
   phishing_report_times_.clear();
-  for (const base::Value& timestamp :
-       delegate_->GetPrefs()
-           ->GetList(prefs::kSafeBrowsingCsdPingTimestamps)
-           ->GetList()) {
-    phishing_report_times_.push_back(
-        base::Time::FromDoubleT(timestamp.GetDouble()));
-  }
 }
 
 // static
--- a/components/safe_browsing/content/browser/client_side_detection_host.h
+++ b/components/safe_browsing/content/browser/client_side_detection_host.h
@@ -17,7 +17,6 @@
 #include "components/safe_browsing/content/common/safe_browsing.mojom-shared.h"
 #include "components/safe_browsing/content/common/safe_browsing.mojom.h"
 #include "components/safe_browsing/core/browser/safe_browsing_token_fetcher.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/db/database_manager.h"
 #include "content/public/browser/web_contents_observer.h"
 #include "mojo/public/cpp/bindings/remote.h"
@@ -25,6 +24,8 @@
 
 #include "url/gurl.h"
 
+class PrefService;
+
 namespace base {
 class TickClock;
 }
--- a/components/safe_browsing/content/browser/client_side_detection_host.cc
+++ b/components/safe_browsing/content/browser/client_side_detection_host.cc
@@ -111,7 +111,7 @@ class ClientSideDetectionHost::ShouldCla
 
     // Don't start classification if |url_| is allowlisted by enterprise policy.
     if (host_->delegate_->GetPrefs() &&
-        IsURLAllowlistedByPolicy(url_, *host_->delegate_->GetPrefs())) {
+        false) {
       DontClassifyForPhishing(NO_CLASSIFY_ALLOWLISTED_BY_POLICY);
     }
 
@@ -468,15 +468,14 @@ void ClientSideDetectionHost::PhishingDe
       VLOG(2) << "Phash Score: " << match.vision_matched_phash_score();
       VLOG(2) << "EMD Score: " << match.vision_matched_emd_score();
     }
-    if (!IsExtendedReportingEnabled(*delegate_->GetPrefs()) &&
-        !IsEnhancedProtectionEnabled(*delegate_->GetPrefs())) {
+    if (true) {
       // These fields should only be set for SBER users.
       verdict->clear_screenshot_digest();
       verdict->clear_screenshot_phash();
       verdict->clear_phash_dimension_size();
     }
 
-    if (IsEnhancedProtectionEnabled(*delegate_->GetPrefs()) &&
+    if (false &&
         base::FeatureList::IsEnabled(kClientSideDetectionReferrerChain)) {
       delegate_->AddReferrerChain(verdict.get(), current_url_);
     }
@@ -565,7 +564,7 @@ bool ClientSideDetectionHost::CanGetAcce
   // Return true if the finch feature is enabled for an ESB user, and if the
   // primary user account is signed in.
   return base::FeatureList::IsEnabled(kClientSideDetectionWithToken) &&
-         IsEnhancedProtectionEnabled(*pref_service_) &&
+         false &&
          !account_signed_in_callback_.is_null() &&
          account_signed_in_callback_.Run();
 }
--- a/weblayer/browser/safe_browsing/safe_browsing_tab_observer.cc
+++ b/weblayer/browser/safe_browsing/safe_browsing_tab_observer.cc
@@ -45,16 +45,11 @@ SafeBrowsingTabObserver::SafeBrowsingTab
   PrefService* prefs = browser_context->pref_service();
   if (prefs) {
     pref_change_registrar_.Init(prefs);
-    pref_change_registrar_.Add(
-        ::prefs::kSafeBrowsingEnabled,
-        base::BindRepeating(
-            &SafeBrowsingTabObserver::UpdateSafebrowsingDetectionHost,
-            base::Unretained(this)));
 
     safe_browsing::ClientSideDetectionService* csd_service =
         ClientSideDetectionServiceFactory::GetForBrowserContext(
             browser_context);
-    if (safe_browsing::IsSafeBrowsingEnabled(*prefs) &&
+    if (false &&
         BrowserProcess::GetInstance()->GetSafeBrowsingService() &&
         csd_service) {
       safebrowsing_detection_host_ =
@@ -72,7 +67,7 @@ void SafeBrowsingTabObserver::UpdateSafe
       static_cast<BrowserContextImpl*>(web_contents_->GetBrowserContext());
   PrefService* prefs = browser_context->pref_service();
 
-  bool safe_browsing = safe_browsing::IsSafeBrowsingEnabled(*prefs);
+  bool safe_browsing = false;
   safe_browsing::ClientSideDetectionService* csd_service =
       ClientSideDetectionServiceFactory::GetForBrowserContext(browser_context);
   if (safe_browsing && csd_service) {
@@ -89,4 +84,4 @@ void SafeBrowsingTabObserver::UpdateSafe
 
 WEB_CONTENTS_USER_DATA_KEY_IMPL(SafeBrowsingTabObserver)
 
-}  // namespace weblayer
\ No newline at end of file
+}  // namespace weblayer
--- a/weblayer/browser/safe_browsing/client_side_detection_service_delegate.cc
+++ b/weblayer/browser/safe_browsing/client_side_detection_service_delegate.cc
@@ -37,22 +37,12 @@ scoped_refptr<network::SharedURLLoaderFa
 ClientSideDetectionServiceDelegate::GetSafeBrowsingURLLoaderFactory() {
   SafeBrowsingService* sb_service =
       BrowserProcess::GetInstance()->GetSafeBrowsingService();
-  return sb_service ? sb_service->GetURLLoaderFactory() : nullptr;
+  return nullptr;
 }
 
 safe_browsing::ChromeUserPopulation
 ClientSideDetectionServiceDelegate::GetUserPopulation() {
   safe_browsing::ChromeUserPopulation population;
-  if (safe_browsing::IsEnhancedProtectionEnabled(*GetPrefs())) {
-    population.set_user_population(
-        safe_browsing::ChromeUserPopulation::ENHANCED_PROTECTION);
-  } else if (safe_browsing::IsExtendedReportingEnabled(*GetPrefs())) {
-    population.set_user_population(
-        safe_browsing::ChromeUserPopulation::EXTENDED_REPORTING);
-  } else if (safe_browsing::IsSafeBrowsingEnabled(*GetPrefs())) {
-    population.set_user_population(
-        safe_browsing::ChromeUserPopulation::SAFE_BROWSING);
-  }
 
   population.set_profile_management_status(
       safe_browsing::ChromeUserPopulation::UNAVAILABLE);
--- a/weblayer/browser/tab_impl.cc
+++ b/weblayer/browser/tab_impl.cc
@@ -263,7 +263,7 @@ class WebContentsTracker : public conten
 // available. Otherwise returns nullptr.
 const scoped_refptr<safe_browsing::SafeBrowsingDatabaseManager>
 GetDatabaseManagerFromSafeBrowsingService() {
-#if defined(OS_ANDROID)
+#if 0
   SafeBrowsingService* safe_browsing_service =
       BrowserProcess::GetInstance()->GetSafeBrowsingService();
   return safe_browsing_service
--- a/weblayer/browser/safe_browsing/real_time_url_lookup_service_factory.cc
+++ b/weblayer/browser/safe_browsing/real_time_url_lookup_service_factory.cc
@@ -59,12 +59,7 @@ KeyedService* RealTimeUrlLookupServiceFa
             PrefService* pref_service =
                 static_cast<BrowserContextImpl*>(context)->pref_service();
             user_population.set_user_population(
-                safe_browsing::IsEnhancedProtectionEnabled(*pref_service)
-                    ? safe_browsing::ChromeUserPopulation::ENHANCED_PROTECTION
-                    : safe_browsing::IsExtendedReportingEnabled(*pref_service)
-                          ? safe_browsing::ChromeUserPopulation::
-                                EXTENDED_REPORTING
-                          : safe_browsing::ChromeUserPopulation::SAFE_BROWSING);
+                safe_browsing::ChromeUserPopulation::SAFE_BROWSING);
 
             user_population.set_profile_management_status(
                 safe_browsing::GetProfileManagementStatus(nullptr));
--- a/weblayer/browser/safe_browsing/client_side_detection_service_factory.cc
+++ b/weblayer/browser/safe_browsing/client_side_detection_service_factory.cc
@@ -45,9 +45,7 @@ ClientSideDetectionServiceFactory::~Clie
 
 KeyedService* ClientSideDetectionServiceFactory::BuildServiceInstanceFor(
     content::BrowserContext* context) const {
-  return new safe_browsing::ClientSideDetectionService(
-      std::make_unique<ClientSideDetectionServiceDelegate>(
-          static_cast<BrowserContextImpl*>(context)));
+  return nullptr;
 }
 
 content::BrowserContext*
