From: Wengling Chen <feiyu2817@gmail.com>
Date: Fri, 10 Jan 2020 18:01:56 -0500
Subject: Fix build error caused by the removal of safe_browsing_prefs.h

---
 android_webview/browser/aw_browser_context.cc                                                  |    2 
 android_webview/browser/safe_browsing/aw_safe_browsing_blocking_page.cc                        |   10 
 chrome/android/BUILD.gn                                                                        |    1 
 chrome/android/java/src/org/chromium/chrome/browser/sync/settings/GoogleServicesSettings.java  |   21 -
 chrome/android/java/src/org/chromium/chrome/browser/sync/settings/SyncAndServicesSettings.java |   19 -
 chrome/browser/android/tab_web_contents_delegate_android.cc                                    |    2 
 chrome/browser/preferences/BUILD.gn                                                            |    1 
 chrome/browser/safe_browsing/BUILD.gn                                                          |    1 
 weblayer/browser/browser_context_impl.cc                                                       |    2 
 weblayer/browser/browser_process.cc                                                            |   10 
 weblayer/browser/browser_process.h                                                             |    4 
 weblayer/browser/content_browser_client_impl.cc                                                |   20 -
 weblayer/browser/profile_impl.cc                                                               |   15 
 weblayer/browser/safe_browsing/safe_browsing_blocking_page.cc                                  |    8 
 weblayer/browser/safe_browsing/safe_browsing_service.cc                                        |  169 ----------
 15 files changed, 17 insertions(+), 268 deletions(-)

--- a/chrome/android/BUILD.gn
+++ b/chrome/android/BUILD.gn
@@ -316,7 +316,6 @@ android_library("chrome_java") {
     "//chrome/browser/performance_hints/android:java",
     "//chrome/browser/preferences:java",
     "//chrome/browser/profiles/android:java",
-    "//chrome/browser/safe_browsing/android:java",
     "//chrome/browser/safety_check/android:java",
     "//chrome/browser/settings:java",
     "//chrome/browser/share/android:java_resources",
--- a/android_webview/browser/aw_browser_context.cc
+++ b/android_webview/browser/aw_browser_context.cc
@@ -233,7 +233,7 @@ base::FilePath AwBrowserContext::GetCont
 
 // static
 void AwBrowserContext::RegisterPrefs(PrefRegistrySimple* registry) {
-  safe_browsing::RegisterProfilePrefs(registry);
+  // safe_browsing::RegisterProfilePrefs(registry);
 
   // Register the Autocomplete Data Retention Policy pref.
   // The default value '0' represents the latest Chrome major version on which
--- a/android_webview/browser/safe_browsing/aw_safe_browsing_blocking_page.cc
+++ b/android_webview/browser/safe_browsing/aw_safe_browsing_blocking_page.cc
@@ -98,12 +98,12 @@ AwSafeBrowsingBlockingPage* AwSafeBrowsi
   BaseSafeBrowsingErrorUI::SBErrorDisplayOptions display_options =
       BaseSafeBrowsingErrorUI::SBErrorDisplayOptions(
           IsMainPageLoadBlocked(unsafe_resources),
-          safe_browsing::IsExtendedReportingOptInAllowed(*pref_service),
+          false,
           browser_context->IsOffTheRecord(),
-          safe_browsing::IsExtendedReportingEnabled(*pref_service),
-          safe_browsing::IsExtendedReportingPolicyManaged(*pref_service),
-          safe_browsing::IsEnhancedProtectionEnabled(*pref_service),
-          pref_service->GetBoolean(::prefs::kSafeBrowsingProceedAnywayDisabled),
+          false,
+          false,
+          false,
+          false,
           false,                    // should_open_links_in_new_tab
           false,                    // always_show_back_to_safety
           "cpn_safe_browsing_wv");  // help_center_article_link
--- a/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/SyncAndServicesSettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/SyncAndServicesSettings.java
@@ -48,7 +48,6 @@ import org.chromium.chrome.browser.prefe
 import org.chromium.chrome.browser.preferences.SharedPreferencesManager;
 import org.chromium.chrome.browser.privacy.settings.PrivacyPreferencesManager;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.safe_browsing.SafeBrowsingBridge;
 import org.chromium.chrome.browser.settings.ChromeManagedPreferenceDelegate;
 import org.chromium.chrome.browser.settings.SettingsActivity;
 import org.chromium.chrome.browser.signin.IdentityServicesProvider;
@@ -360,16 +359,8 @@ public class SyncAndServicesSettings ext
             PostTask.postTask(UiThreadTaskTraits.DEFAULT, this::updatePreferences);
         } else if (PREF_SEARCH_SUGGESTIONS.equals(key)) {
             mPrefServiceBridge.setBoolean(Pref.SEARCH_SUGGEST_ENABLED, (boolean) newValue);
-        } else if (PREF_SAFE_BROWSING.equals(key)) {
-            mPrefServiceBridge.setBoolean(Pref.SAFE_BROWSING_ENABLED, (boolean) newValue);
-            // Toggling the safe browsing preference impacts the leak detection and the
-            // safe browsing reporting preferences as well.
-            PostTask.postTask(UiThreadTaskTraits.DEFAULT,
-                    this::updateLeakDetectionAndSafeBrowsingReportingPreferences);
         } else if (PREF_PASSWORD_LEAK_DETECTION.equals(key)) {
             mPrefServiceBridge.setBoolean(Pref.PASSWORD_LEAK_DETECTION_ENABLED, (boolean) newValue);
-        } else if (PREF_SAFE_BROWSING_SCOUT_REPORTING.equals(key)) {
-            SafeBrowsingBridge.setSafeBrowsingExtendedReportingEnabled((boolean) newValue);
         } else if (PREF_NAVIGATION_ERROR.equals(key)) {
             mPrefServiceBridge.setBoolean(Pref.ALTERNATE_ERROR_PAGES_ENABLED, (boolean) newValue);
         } else if (PREF_USAGE_AND_CRASH_REPORTING.equals(key)) {
@@ -551,7 +542,6 @@ public class SyncAndServicesSettings ext
         mSearchSuggestions.setChecked(mPrefServiceBridge.getBoolean(Pref.SEARCH_SUGGEST_ENABLED));
         mNavigationError.setChecked(
                 mPrefServiceBridge.getBoolean(Pref.ALTERNATE_ERROR_PAGES_ENABLED));
-        mSafeBrowsing.setChecked(mPrefServiceBridge.getBoolean(Pref.SAFE_BROWSING_ENABLED));
 
         updateLeakDetectionAndSafeBrowsingReportingPreferences();
 
@@ -623,10 +613,9 @@ public class SyncAndServicesSettings ext
      * its appearance needs to be updated. The same goes for safe browsing reporting.
      */
     private void updateLeakDetectionAndSafeBrowsingReportingPreferences() {
-        boolean safe_browsing_enabled = mPrefServiceBridge.getBoolean(Pref.SAFE_BROWSING_ENABLED);
+        boolean safe_browsing_enabled = false;
         mSafeBrowsingReporting.setEnabled(safe_browsing_enabled);
-        mSafeBrowsingReporting.setChecked(safe_browsing_enabled
-                && SafeBrowsingBridge.isSafeBrowsingExtendedReportingEnabled());
+        mSafeBrowsingReporting.setChecked(safe_browsing_enabled);
 
         boolean has_token_for_leak_check = PasswordUIView.hasAccountForLeakCheckRequest();
         boolean leak_detection_enabled =
@@ -654,10 +643,10 @@ public class SyncAndServicesSettings ext
                 return mPrefServiceBridge.isManagedPreference(Pref.SEARCH_SUGGEST_ENABLED);
             }
             if (PREF_SAFE_BROWSING_SCOUT_REPORTING.equals(key)) {
-                return SafeBrowsingBridge.isSafeBrowsingExtendedReportingManaged();
+                return false;
             }
             if (PREF_SAFE_BROWSING.equals(key)) {
-                return mPrefServiceBridge.isManagedPreference(Pref.SAFE_BROWSING_ENABLED);
+                return false;
             }
             if (PREF_PASSWORD_LEAK_DETECTION.equals(key)) {
                 return mPrefServiceBridge.isManagedPreference(Pref.PASSWORD_LEAK_DETECTION_ENABLED);
--- a/weblayer/browser/browser_context_impl.cc
+++ b/weblayer/browser/browser_context_impl.cc
@@ -18,7 +18,6 @@
 #include "components/prefs/json_pref_store.h"
 #include "components/prefs/pref_service.h"
 #include "components/prefs/pref_service_factory.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/stateful_ssl_host_state_delegate.h"
 #include "components/site_isolation/pref_names.h"
 #include "components/site_isolation/site_isolation_policy.h"
@@ -252,7 +251,6 @@ void BrowserContextImpl::RegisterPrefs(
 
   StatefulSSLHostStateDelegate::RegisterProfilePrefs(pref_registry);
   HostContentSettingsMap::RegisterProfilePrefs(pref_registry);
-  safe_browsing::RegisterProfilePrefs(pref_registry);
   language::LanguagePrefs::RegisterProfilePrefs(pref_registry);
   translate::TranslatePrefs::RegisterProfilePrefs(pref_registry);
   blocked_content::SafeBrowsingTriggeredPopupBlocker::RegisterProfilePrefs(
--- a/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/GoogleServicesSettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/GoogleServicesSettings.java
@@ -28,7 +28,6 @@ import org.chromium.chrome.browser.prefe
 import org.chromium.chrome.browser.preferences.SharedPreferencesManager;
 import org.chromium.chrome.browser.privacy.settings.PrivacyPreferencesManager;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.safe_browsing.SafeBrowsingBridge;
 import org.chromium.chrome.browser.settings.ChromeManagedPreferenceDelegate;
 import org.chromium.chrome.browser.signin.UnifiedConsentServiceBridge;
 import org.chromium.components.browser_ui.settings.ChromeSwitchPreference;
@@ -158,16 +157,8 @@ public class GoogleServicesSettings
         String key = preference.getKey();
         if (PREF_SEARCH_SUGGESTIONS.equals(key)) {
             mPrefServiceBridge.setBoolean(Pref.SEARCH_SUGGEST_ENABLED, (boolean) newValue);
-        } else if (PREF_SAFE_BROWSING.equals(key)) {
-            mPrefServiceBridge.setBoolean(Pref.SAFE_BROWSING_ENABLED, (boolean) newValue);
-            // Toggling the safe browsing preference impacts the leak detection and the
-            // safe browsing reporting preferences as well.
-            PostTask.postTask(UiThreadTaskTraits.DEFAULT,
-                    this::updateLeakDetectionAndSafeBrowsingReportingPreferences);
         } else if (PREF_PASSWORD_LEAK_DETECTION.equals(key)) {
             mPrefServiceBridge.setBoolean(Pref.PASSWORD_LEAK_DETECTION_ENABLED, (boolean) newValue);
-        } else if (PREF_SAFE_BROWSING_SCOUT_REPORTING.equals(key)) {
-            SafeBrowsingBridge.setSafeBrowsingExtendedReportingEnabled((boolean) newValue);
         } else if (PREF_NAVIGATION_ERROR.equals(key)) {
             mPrefServiceBridge.setBoolean(Pref.ALTERNATE_ERROR_PAGES_ENABLED, (boolean) newValue);
         } else if (PREF_USAGE_AND_CRASH_REPORTING.equals(key)) {
@@ -190,7 +181,6 @@ public class GoogleServicesSettings
         mSearchSuggestions.setChecked(mPrefServiceBridge.getBoolean(Pref.SEARCH_SUGGEST_ENABLED));
         mNavigationError.setChecked(
                 mPrefServiceBridge.getBoolean(Pref.ALTERNATE_ERROR_PAGES_ENABLED));
-        mSafeBrowsing.setChecked(mPrefServiceBridge.getBoolean(Pref.SAFE_BROWSING_ENABLED));
 
         updateLeakDetectionAndSafeBrowsingReportingPreferences();
 
@@ -216,10 +206,9 @@ public class GoogleServicesSettings
      * its appearance needs to be updated. The same goes for safe browsing reporting.
      */
     private void updateLeakDetectionAndSafeBrowsingReportingPreferences() {
-        boolean safe_browsing_enabled = mPrefServiceBridge.getBoolean(Pref.SAFE_BROWSING_ENABLED);
+        boolean safe_browsing_enabled = false;
         mSafeBrowsingReporting.setEnabled(safe_browsing_enabled);
-        mSafeBrowsingReporting.setChecked(safe_browsing_enabled
-                && SafeBrowsingBridge.isSafeBrowsingExtendedReportingEnabled());
+        mSafeBrowsingReporting.setChecked(safe_browsing_enabled);
 
         boolean has_token_for_leak_check = PasswordUIView.hasAccountForLeakCheckRequest();
         boolean leak_detection_enabled =
@@ -246,12 +235,6 @@ public class GoogleServicesSettings
             if (PREF_SEARCH_SUGGESTIONS.equals(key)) {
                 return mPrefServiceBridge.isManagedPreference(Pref.SEARCH_SUGGEST_ENABLED);
             }
-            if (PREF_SAFE_BROWSING_SCOUT_REPORTING.equals(key)) {
-                return SafeBrowsingBridge.isSafeBrowsingExtendedReportingManaged();
-            }
-            if (PREF_SAFE_BROWSING.equals(key)) {
-                return mPrefServiceBridge.isManagedPreference(Pref.SAFE_BROWSING_ENABLED);
-            }
             if (PREF_PASSWORD_LEAK_DETECTION.equals(key)) {
                 return mPrefServiceBridge.isManagedPreference(Pref.PASSWORD_LEAK_DETECTION_ENABLED);
             }
--- a/chrome/browser/safe_browsing/BUILD.gn
+++ b/chrome/browser/safe_browsing/BUILD.gn
@@ -274,7 +274,6 @@ static_library("safe_browsing") {
         "telemetry/android/android_telemetry_service.h",
       ]
       deps += [
-        "//chrome/browser/safe_browsing/android",
         "//components/safe_browsing:buildflags",
         "//components/safe_browsing/android:safe_browsing_mobile",
       ]
--- a/chrome/browser/preferences/BUILD.gn
+++ b/chrome/browser/preferences/BUILD.gn
@@ -35,7 +35,6 @@ java_cpp_strings("java_pref_names_srcjar
     "//components/offline_pages/core/prefetch/prefetch_prefs.cc",
     "//components/password_manager/core/common/password_manager_pref_names.cc",
     "//components/payments/core/payment_prefs.cc",
-    "//components/safe_browsing/core/common/safe_browsing_prefs.cc",
     "//components/signin/public/base/signin_pref_names.cc",
     "//components/translate/core/browser/translate_pref_names.cc",
   ]
--- a/chrome/browser/android/tab_web_contents_delegate_android.cc
+++ b/chrome/browser/android/tab_web_contents_delegate_android.cc
@@ -175,8 +175,6 @@ void TabWebContentsDelegateAndroid::Port
   InfoBarService::CreateForWebContents(portal_contents);
   PrefsTabHelper::CreateForWebContents(portal_contents);
   DataReductionProxyTabHelper::CreateForWebContents(portal_contents);
-  safe_browsing::SafeBrowsingNavigationObserver::MaybeCreateForWebContents(
-      portal_contents);
 }
 
 void TabWebContentsDelegateAndroid::RunFileChooser(
--- a/weblayer/browser/content_browser_client_impl.cc
+++ b/weblayer/browser/content_browser_client_impl.cc
@@ -377,8 +377,7 @@ ContentBrowserClientImpl::CreateURLLoade
 #if defined(OS_ANDROID)
     BrowserContextImpl* browser_context_impl =
         static_cast<BrowserContextImpl*>(browser_context);
-    bool is_safe_browsing_enabled = safe_browsing::IsSafeBrowsingEnabled(
-        *browser_context_impl->pref_service());
+    bool is_safe_browsing_enabled = false;
 
     if (is_safe_browsing_enabled) {
       bool is_real_time_lookup_enabled =
@@ -589,18 +588,6 @@ ContentBrowserClientImpl::CreateThrottle
 
 #if defined(OS_ANDROID)
   if (handle->IsInMainFrame()) {
-    if (base::FeatureList::IsEnabled(features::kWebLayerSafeBrowsing) &&
-        IsSafebrowsingSupported()) {
-      throttles.push_back(
-          GetSafeBrowsingService()->CreateSafeBrowsingNavigationThrottle(
-              handle));
-      if (handle->IsInMainFrame()) {
-        throttles.push_back(
-            navigation_interception::InterceptNavigationDelegate::
-                CreateThrottleFor(
-                    handle, navigation_interception::SynchronyMode::kAsync));
-      }
-    }
   }
 #endif
   return throttles;
@@ -651,11 +638,6 @@ void ContentBrowserClientImpl::ExposeInt
       };
   registry->AddInterface(base::BindRepeating(create_spellcheck_host),
                          content::GetUIThreadTaskRunner({}));
-
-  if (base::FeatureList::IsEnabled(features::kWebLayerSafeBrowsing) &&
-      IsSafebrowsingSupported()) {
-    GetSafeBrowsingService()->AddInterface(registry, render_process_host);
-  }
 #endif  // defined(OS_ANDROID)
 }
 
--- a/weblayer/browser/safe_browsing/safe_browsing_blocking_page.cc
+++ b/weblayer/browser/safe_browsing/safe_browsing_blocking_page.cc
@@ -50,12 +50,8 @@ SafeBrowsingBlockingPage* SafeBrowsingBl
   security_interstitials::BaseSafeBrowsingErrorUI::SBErrorDisplayOptions
       display_options =
           BaseBlockingPage::CreateDefaultDisplayOptions(unsafe_resources);
-  display_options.is_extended_reporting_opt_in_allowed =
-      safe_browsing::IsExtendedReportingOptInAllowed(
-          *(browser_context->pref_service()));
-  display_options.is_extended_reporting_enabled =
-      safe_browsing::IsExtendedReportingEnabled(
-          *(browser_context->pref_service()));
+  display_options.is_extended_reporting_opt_in_allowed = false;
+  display_options.is_extended_reporting_enabled = false;
 
   return new SafeBrowsingBlockingPage(
       ui_manager, web_contents, url, unsafe_resources,
--- a/weblayer/browser/safe_browsing/safe_browsing_service.cc
+++ b/weblayer/browser/safe_browsing/safe_browsing_service.cc
@@ -2,8 +2,6 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#include "weblayer/browser/safe_browsing/safe_browsing_service.h"
-
 #include "base/bind.h"
 #include "base/path_service.h"
 #include "components/prefs/pref_service.h"
@@ -12,7 +10,6 @@
 #include "components/safe_browsing/content/browser/browser_url_loader_throttle.h"
 #include "components/safe_browsing/content/browser/mojo_safe_browsing_impl.h"
 #include "components/safe_browsing/core/browser/safe_browsing_network_context.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/realtime/url_lookup_service.h"
 #include "content/public/browser/browser_context.h"
 #include "content/public/browser/browser_task_traits.h"
@@ -57,10 +54,7 @@ void MaybeCreateSafeBrowsing(
   if (!render_process_host)
     return;
 
-  bool is_safe_browsing_enabled = safe_browsing::IsSafeBrowsingEnabled(
-      *static_cast<BrowserContextImpl*>(
-           render_process_host->GetBrowserContext())
-           ->pref_service());
+  bool is_safe_browsing_enabled = false;
 
   if (!is_safe_browsing_enabled)
     return;
@@ -74,165 +68,4 @@ void MaybeCreateSafeBrowsing(
 
 }  // namespace
 
-SafeBrowsingService::SafeBrowsingService(const std::string& user_agent)
-    : user_agent_(user_agent) {}
-
-SafeBrowsingService::~SafeBrowsingService() = default;
-
-void SafeBrowsingService::Initialize() {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-
-  if (network_context_) {
-    // already initialized
-    return;
-  }
-
-  safe_browsing_api_handler_.reset(
-      new safe_browsing::SafeBrowsingApiHandlerBridge());
-  safe_browsing::SafeBrowsingApiHandler::SetInstance(
-      safe_browsing_api_handler_.get());
-
-  base::FilePath user_data_dir;
-  bool result =
-      base::PathService::Get(base::DIR_ANDROID_APP_DATA, &user_data_dir);
-  DCHECK(result);
-
-  // safebrowsing network context needs to be created on the UI thread.
-  network_context_ =
-      std::make_unique<safe_browsing::SafeBrowsingNetworkContext>(
-          user_data_dir,
-          base::BindRepeating(CreateDefaultNetworkContextParams, user_agent_));
-
-  CreateSafeBrowsingUIManager();
-}
-
-std::unique_ptr<blink::URLLoaderThrottle>
-SafeBrowsingService::CreateURLLoaderThrottle(
-    const base::RepeatingCallback<content::WebContents*()>& wc_getter,
-    int frame_tree_node_id,
-    safe_browsing::RealTimeUrlLookupServiceBase* url_lookup_service) {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-
-  return safe_browsing::BrowserURLLoaderThrottle::Create(
-      base::BindOnce(
-          [](SafeBrowsingService* sb_service) {
-            return sb_service->GetSafeBrowsingUrlCheckerDelegate();
-          },
-          base::Unretained(this)),
-      wc_getter, frame_tree_node_id,
-      url_lookup_service ? url_lookup_service->GetWeakPtr() : nullptr);
-}
-
-std::unique_ptr<content::NavigationThrottle>
-SafeBrowsingService::CreateSafeBrowsingNavigationThrottle(
-    content::NavigationHandle* handle) {
-  return std::make_unique<SafeBrowsingNavigationThrottle>(
-      handle, GetSafeBrowsingUIManager());
-}
-
-scoped_refptr<safe_browsing::UrlCheckerDelegate>
-SafeBrowsingService::GetSafeBrowsingUrlCheckerDelegate() {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::IO);
-
-  if (!safe_browsing_url_checker_delegate_) {
-    safe_browsing_url_checker_delegate_ = new UrlCheckerDelegateImpl(
-        GetSafeBrowsingDBManager(), GetSafeBrowsingUIManager());
-  }
-
-  return safe_browsing_url_checker_delegate_;
-}
-
-safe_browsing::RemoteSafeBrowsingDatabaseManager*
-SafeBrowsingService::GetSafeBrowsingDBManager() {
-  if (!safe_browsing_db_manager_) {
-    CreateAndStartSafeBrowsingDBManager();
-  }
-  return safe_browsing_db_manager_.get();
-}
-
-SafeBrowsingUIManager* SafeBrowsingService::GetSafeBrowsingUIManager() {
-  return ui_manager_.get();
-}
-
-void SafeBrowsingService::CreateSafeBrowsingUIManager() {
-  DCHECK(!ui_manager_);
-  ui_manager_ = new SafeBrowsingUIManager(this);
-}
-
-void SafeBrowsingService::CreateAndStartSafeBrowsingDBManager() {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::IO);
-  DCHECK(!safe_browsing_db_manager_);
-
-  safe_browsing_db_manager_ =
-      new safe_browsing::RemoteSafeBrowsingDatabaseManager();
-
-  // V4ProtocolConfig is not used. Just create one with empty values.
-  safe_browsing::V4ProtocolConfig config("", false, "", "");
-  safe_browsing_db_manager_->StartOnIOThread(GetURLLoaderFactoryOnIOThread(),
-                                             config);
-}
-
-scoped_refptr<network::SharedURLLoaderFactory>
-SafeBrowsingService::GetURLLoaderFactoryOnIOThread() {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::IO);
-  if (!shared_url_loader_factory_on_io_) {
-    content::GetUIThreadTaskRunner({})->PostTask(
-        FROM_HERE,
-        base::BindOnce(&SafeBrowsingService::CreateURLLoaderFactoryForIO,
-                       base::Unretained(this),
-                       url_loader_factory_on_io_.BindNewPipeAndPassReceiver()));
-    shared_url_loader_factory_on_io_ =
-        base::MakeRefCounted<network::WeakWrapperSharedURLLoaderFactory>(
-            url_loader_factory_on_io_.get());
-  }
-  return shared_url_loader_factory_on_io_;
-}
-
-void SafeBrowsingService::CreateURLLoaderFactoryForIO(
-    mojo::PendingReceiver<network::mojom::URLLoaderFactory> receiver) {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-  auto url_loader_factory_params =
-      network::mojom::URLLoaderFactoryParams::New();
-  url_loader_factory_params->process_id = network::mojom::kBrowserProcessId;
-  url_loader_factory_params->is_corb_enabled = false;
-  network_context_->GetNetworkContext()->CreateURLLoaderFactory(
-      std::move(receiver), std::move(url_loader_factory_params));
-}
-
-void SafeBrowsingService::AddInterface(
-    service_manager::BinderRegistry* registry,
-    content::RenderProcessHost* render_process_host) {
-  content::ResourceContext* resource_context =
-      render_process_host->GetBrowserContext()->GetResourceContext();
-  registry->AddInterface(
-      base::BindRepeating(
-          &MaybeCreateSafeBrowsing, render_process_host->GetID(),
-          resource_context,
-          base::BindRepeating(
-              &SafeBrowsingService::GetSafeBrowsingUrlCheckerDelegate,
-              base::Unretained(this))),
-      content::GetUIThreadTaskRunner({}));
-}
-
-void SafeBrowsingService::StopDBManager() {
-  content::GetIOThreadTaskRunner({})->PostTask(
-      FROM_HERE, base::BindOnce(&SafeBrowsingService::StopDBManagerOnIOThread,
-                                base::Unretained(this)));
-}
-
-void SafeBrowsingService::StopDBManagerOnIOThread() {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::IO);
-  if (safe_browsing_db_manager_) {
-    safe_browsing_db_manager_->StopOnIOThread(true /*shutdown*/);
-    safe_browsing_db_manager_.reset();
-  }
-}
-
-scoped_refptr<network::SharedURLLoaderFactory>
-SafeBrowsingService::GetURLLoaderFactory() {
-  if (!network_context_)
-    return nullptr;
-  return network_context_->GetURLLoaderFactory();
-}
-
 }  // namespace weblayer
--- a/weblayer/browser/profile_impl.cc
+++ b/weblayer/browser/profile_impl.cc
@@ -42,7 +42,6 @@
 #include "base/android/jni_array.h"
 #include "base/android/jni_string.h"
 #include "base/android/scoped_java_ref.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/unified_consent/pref_names.h"
 #include "weblayer/browser/browser_process.h"
 #include "weblayer/browser/java/jni/ProfileImpl_jni.h"
@@ -512,10 +511,6 @@ void ProfileImpl::SetBooleanSetting(Sett
   auto* pref_service = GetBrowserContext()->pref_service();
   switch (type) {
     case SettingType::BASIC_SAFE_BROWSING_ENABLED:
-#if defined(OS_ANDROID)
-      pref_service->SetBoolean(::prefs::kSafeBrowsingEnabled, value);
-      pref_service->SetBoolean(::prefs::kSafeBrowsingEnhanced, false);
-#endif
       break;
     case SettingType::UKM_ENABLED: {
 #if defined(OS_ANDROID)
@@ -530,10 +525,6 @@ void ProfileImpl::SetBooleanSetting(Sett
       break;
     }
     case SettingType::EXTENDED_REPORTING_SAFE_BROWSING_ENABLED:
-#if defined(OS_ANDROID)
-      pref_service->SetBoolean(::prefs::kSafeBrowsingScoutReportingEnabled,
-                               value);
-#endif
       break;
     case SettingType::REAL_TIME_SAFE_BROWSING_ENABLED:
 #if defined(OS_ANDROID)
@@ -550,16 +541,12 @@ bool ProfileImpl::GetBooleanSetting(Sett
   switch (type) {
     case SettingType::BASIC_SAFE_BROWSING_ENABLED:
 #if defined(OS_ANDROID)
-      return safe_browsing::IsSafeBrowsingEnabled(*pref_service);
+      return false;
 #endif
       return false;
     case SettingType::UKM_ENABLED:
       return pref_service->GetBoolean(prefs::kUkmEnabled);
     case SettingType::EXTENDED_REPORTING_SAFE_BROWSING_ENABLED:
-#if defined(OS_ANDROID)
-      return pref_service->GetBoolean(
-          ::prefs::kSafeBrowsingScoutReportingEnabled);
-#endif
       return false;
     case SettingType::REAL_TIME_SAFE_BROWSING_ENABLED:
 #if defined(OS_ANDROID)
--- a/weblayer/browser/browser_process.cc
+++ b/weblayer/browser/browser_process.cc
@@ -101,19 +101,9 @@ void BrowserProcess::CreateNetworkQualit
 #if defined(OS_ANDROID)
 SafeBrowsingService* BrowserProcess::GetSafeBrowsingService(
     std::string user_agent) {
-  if (!safe_browsing_service_) {
-    // Create and initialize safe_browsing_service on first get.
-    // Note: Initialize() needs to happen on UI thread.
-    safe_browsing_service_ = std::make_unique<SafeBrowsingService>(user_agent);
-    safe_browsing_service_->Initialize();
-  }
-  return safe_browsing_service_.get();
 }
 
 void BrowserProcess::StopSafeBrowsingService() {
-  if (safe_browsing_service_) {
-    safe_browsing_service_->StopDBManager();
-  }
 }
 #endif
 
--- a/weblayer/browser/browser_process.h
+++ b/weblayer/browser/browser_process.h
@@ -66,10 +66,6 @@ class BrowserProcess {
       network::NetworkQualityTracker::RTTAndThroughputEstimatesObserver>
       network_quality_observer_;
 
-#if defined(OS_ANDROID)
-  std::unique_ptr<SafeBrowsingService> safe_browsing_service_;
-#endif
-
   SEQUENCE_CHECKER(sequence_checker_);
 
   DISALLOW_COPY_AND_ASSIGN(BrowserProcess);
