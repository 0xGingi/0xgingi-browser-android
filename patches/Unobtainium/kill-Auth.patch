From: thermatk <thermatk@thermatk.com>
Date: Fri, 22 Jun 2018 17:06:15 +0200
Subject: kill Auth

---
 components/signin/public/android/java/src/org/chromium/components/signin/AccountRenameChecker.java         |   15 ---
 components/signin/public/android/java/src/org/chromium/components/signin/SystemAccountManagerDelegate.java |   49 ----------
 2 files changed, 3 insertions(+), 61 deletions(-)

--- a/components/signin/public/android/java/src/org/chromium/components/signin/SystemAccountManagerDelegate.java
+++ b/components/signin/public/android/java/src/org/chromium/components/signin/SystemAccountManagerDelegate.java
@@ -25,9 +25,6 @@ import android.os.SystemClock;
 
 import androidx.annotation.Nullable;
 
-import com.google.android.gms.auth.GoogleAuthException;
-import com.google.android.gms.auth.GoogleAuthUtil;
-
 import org.chromium.base.ApiCompatibilityUtils;
 import org.chromium.base.Callback;
 import org.chromium.base.ContextUtils;
@@ -82,14 +79,6 @@ public class SystemAccountManagerDelegat
 
     @Override
     public Account[] getAccounts() {
-        if (hasGetAccountsPermission() && isGooglePlayServicesAvailable()) {
-            long startTime = SystemClock.elapsedRealtime();
-            Account[] accounts =
-                    mAccountManager.getAccountsByType(GoogleAuthUtil.GOOGLE_ACCOUNT_TYPE);
-            RecordHistogram.recordTimesHistogram("Signin.AndroidGetAccountsTime_AccountManager",
-                    SystemClock.elapsedRealtime() - startTime);
-            return accounts;
-        }
         // Account seeding relies on GoogleAuthUtil.getAccountId to get GAIA ids,
         // so don't report any accounts if Google Play Services are out of date.
         return new Account[] {};
@@ -100,28 +89,12 @@ public class SystemAccountManagerDelegat
             throws AuthException {
         ThreadUtils.assertOnBackgroundThread();
         assert AccountUtils.GOOGLE_ACCOUNT_TYPE.equals(account.type);
-        try {
-            return new AccessTokenData(GoogleAuthUtil.getTokenWithNotification(
-                    ContextUtils.getApplicationContext(), account, authTokenScope, null));
-        } catch (GoogleAuthException ex) {
-            // This case includes a UserRecoverableNotifiedException, but most clients will have
-            // their own retry mechanism anyway.
-            throw new AuthException(AuthException.NONTRANSIENT,
-                    "Error while getting token for scope '" + authTokenScope + "'", ex);
-        } catch (IOException ex) {
-            throw new AuthException(AuthException.TRANSIENT, ex);
-        }
+        throw new AuthException(AuthException.NONTRANSIENT,
+                "Error while getting token for scope '" + authTokenScope + "'");
     }
 
     @Override
     public void invalidateAuthToken(String authToken) throws AuthException {
-        try {
-            GoogleAuthUtil.clearToken(ContextUtils.getApplicationContext(), authToken);
-        } catch (GoogleAuthException ex) {
-            throw new AuthException(AuthException.NONTRANSIENT, ex);
-        } catch (IOException ex) {
-            throw new AuthException(AuthException.TRANSIENT, ex);
-        }
     }
 
     @Override
@@ -158,17 +131,6 @@ public class SystemAccountManagerDelegat
     @SuppressLint("MissingPermission")
     @Override
     public void createAddAccountIntent(Callback<Intent> callback) {
-        AccountManagerCallback<Bundle> accountManagerCallback = accountManagerFuture -> {
-            try {
-                Bundle bundle = accountManagerFuture.getResult();
-                callback.onResult(bundle.getParcelable(AccountManager.KEY_INTENT));
-            } catch (OperationCanceledException | IOException | AuthenticatorException e) {
-                Log.e(TAG, "Error while creating an intent to add an account: ", e);
-                callback.onResult(null);
-            }
-        };
-        mAccountManager.addAccount(GoogleAuthUtil.GOOGLE_ACCOUNT_TYPE, null, null, null, null,
-                accountManagerCallback, null);
     }
 
     // No permission is needed on 23+ and Chrome always has MANAGE_ACCOUNTS permission on lower APIs
@@ -201,12 +163,7 @@ public class SystemAccountManagerDelegat
     @Nullable
     @Override
     public String getAccountGaiaId(String accountEmail) {
-        try {
-            return GoogleAuthUtil.getAccountId(ContextUtils.getApplicationContext(), accountEmail);
-        } catch (IOException | GoogleAuthException ex) {
-            Log.e(TAG, "SystemAccountManagerDelegate.getAccountGaiaId", ex);
-            return null;
-        }
+        return null;
     }
 
     protected boolean isGooglePlayServicesAvailable() {
--- a/components/signin/public/android/java/src/org/chromium/components/signin/AccountRenameChecker.java
+++ b/components/signin/public/android/java/src/org/chromium/components/signin/AccountRenameChecker.java
@@ -11,10 +11,6 @@ import androidx.annotation.Nullable;
 import androidx.annotation.VisibleForTesting;
 import androidx.annotation.WorkerThread;
 
-import com.google.android.gms.auth.AccountChangeEvent;
-import com.google.android.gms.auth.GoogleAuthException;
-import com.google.android.gms.auth.GoogleAuthUtil;
-
 import org.chromium.base.ContextUtils;
 import org.chromium.base.Log;
 import org.chromium.base.Promise;
@@ -52,17 +48,6 @@ public final class AccountRenameChecker
         @Override
         public @Nullable String getNewNameOfRenamedAccount(String accountEmail) {
             final Context context = ContextUtils.getApplicationContext();
-            try {
-                final List<AccountChangeEvent> accountChangeEvents =
-                        GoogleAuthUtil.getAccountChangeEvents(context, 0, accountEmail);
-                for (AccountChangeEvent event : accountChangeEvents) {
-                    if (event.getChangeType() == GoogleAuthUtil.CHANGE_TYPE_ACCOUNT_RENAMED_TO) {
-                        return event.getChangeData();
-                    }
-                }
-            } catch (IOException | GoogleAuthException e) {
-                Log.w(TAG, "Failed to get change events", e);
-            }
             return null;
         }
     }
