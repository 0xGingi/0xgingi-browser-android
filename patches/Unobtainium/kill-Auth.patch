From: thermatk <thermatk@thermatk.com>
Date: Fri, 22 Jun 2018 17:06:15 +0200
Subject: kill Auth

---
 components/signin/public/android/java/src/org/chromium/components/signin/AccountRenameChecker.java         |   15 --
 components/signin/public/android/java/src/org/chromium/components/signin/SystemAccountManagerDelegate.java |   54 ----------
 2 files changed, 4 insertions(+), 65 deletions(-)

--- a/components/signin/public/android/java/src/org/chromium/components/signin/SystemAccountManagerDelegate.java
+++ b/components/signin/public/android/java/src/org/chromium/components/signin/SystemAccountManagerDelegate.java
@@ -26,11 +26,6 @@ import android.os.SystemClock;
 
 import androidx.annotation.Nullable;
 
-import com.google.android.gms.auth.GoogleAuthException;
-import com.google.android.gms.auth.GoogleAuthUtil;
-import com.google.android.gms.auth.GooglePlayServicesAvailabilityException;
-import com.google.android.gms.common.ConnectionResult;
-import com.google.android.gms.common.GoogleApiAvailability;
 
 import org.chromium.base.ApiCompatibilityUtils;
 import org.chromium.base.Callback;
@@ -120,14 +115,7 @@ public class SystemAccountManagerDelegat
         // so don't report any accounts if Google Play Services are out of date.
         checkCanUseGooglePlayServices();
 
-        if (!hasGetAccountsPermission()) {
-            return new Account[] {};
-        }
-        long now = SystemClock.elapsedRealtime();
-        Account[] accounts = mAccountManager.getAccountsByType(GoogleAuthUtil.GOOGLE_ACCOUNT_TYPE);
-        long elapsed = SystemClock.elapsedRealtime() - now;
-        recordElapsedTimeHistogram("Signin.AndroidGetAccountsTime_AccountManager", elapsed);
-        return accounts;
+        return new Account[] {};
     }
 
     @Override
@@ -135,30 +123,12 @@ public class SystemAccountManagerDelegat
             throws AuthException {
         assert !ThreadUtils.runningOnUiThread();
         assert AccountUtils.GOOGLE_ACCOUNT_TYPE.equals(account.type);
-        try {
-            return new AccessTokenData(GoogleAuthUtil.getTokenWithNotification(
-                    ContextUtils.getApplicationContext(), account, authTokenScope, null));
-        } catch (GoogleAuthException ex) {
-            // This case includes a UserRecoverableNotifiedException, but most clients will have
-            // their own retry mechanism anyway.
-            throw new AuthException(AuthException.NONTRANSIENT,
-                    "Error while getting token for scope '" + authTokenScope + "'", ex);
-        } catch (IOException ex) {
-            throw new AuthException(AuthException.TRANSIENT, ex);
-        }
+        throw new AuthException(AuthException.NONTRANSIENT,
+                    "Error while getting token for scope '" + authTokenScope + "'");
     }
 
     @Override
     public void invalidateAuthToken(String authToken) throws AuthException {
-        try {
-            GoogleAuthUtil.clearToken(ContextUtils.getApplicationContext(), authToken);
-        } catch (GooglePlayServicesAvailabilityException ex) {
-            throw new AuthException(AuthException.NONTRANSIENT, ex);
-        } catch (GoogleAuthException ex) {
-            throw new AuthException(AuthException.NONTRANSIENT, ex);
-        } catch (IOException ex) {
-            throw new AuthException(AuthException.TRANSIENT, ex);
-        }
     }
 
     @Override
@@ -199,17 +169,6 @@ public class SystemAccountManagerDelegat
     @SuppressLint("MissingPermission")
     @Override
     public void createAddAccountIntent(Callback<Intent> callback) {
-        AccountManagerCallback<Bundle> accountManagerCallback = accountManagerFuture -> {
-            try {
-                Bundle bundle = accountManagerFuture.getResult();
-                callback.onResult(bundle.getParcelable(AccountManager.KEY_INTENT));
-            } catch (OperationCanceledException | IOException | AuthenticatorException e) {
-                Log.e(TAG, "Error while creating an intent to add an account: ", e);
-                callback.onResult(null);
-            }
-        };
-        mAccountManager.addAccount(GoogleAuthUtil.GOOGLE_ACCOUNT_TYPE, null, null, null, null,
-                accountManagerCallback, null);
     }
 
     // No permission is needed on 23+ and Chrome always has MANAGE_ACCOUNTS permission on lower APIs
@@ -249,12 +208,7 @@ public class SystemAccountManagerDelegat
     @Nullable
     @Override
     public String getAccountGaiaId(String accountEmail) {
-        try {
-            return GoogleAuthUtil.getAccountId(ContextUtils.getApplicationContext(), accountEmail);
-        } catch (IOException | GoogleAuthException ex) {
-            Log.e(TAG, "SystemAccountManagerDelegate.getAccountGaiaId", ex);
-            return null;
-        }
+        return null;
     }
 
     @Override
--- a/components/signin/public/android/java/src/org/chromium/components/signin/AccountRenameChecker.java
+++ b/components/signin/public/android/java/src/org/chromium/components/signin/AccountRenameChecker.java
@@ -10,10 +10,6 @@ import android.content.Context;
 import androidx.annotation.Nullable;
 import androidx.annotation.WorkerThread;
 
-import com.google.android.gms.auth.AccountChangeEvent;
-import com.google.android.gms.auth.GoogleAuthException;
-import com.google.android.gms.auth.GoogleAuthUtil;
-
 import org.chromium.base.ContextUtils;
 import org.chromium.base.Log;
 
@@ -36,17 +32,6 @@ public final class AccountRenameChecker
         @Nullable
         String getNewNameOfRenamedAccount(String accountEmail) {
             final Context context = ContextUtils.getApplicationContext();
-            try {
-                final List<AccountChangeEvent> accountChangeEvents =
-                        GoogleAuthUtil.getAccountChangeEvents(context, 0, accountEmail);
-                for (AccountChangeEvent event : accountChangeEvents) {
-                    if (event.getChangeType() == GoogleAuthUtil.CHANGE_TYPE_ACCOUNT_RENAMED_TO) {
-                        return event.getChangeData();
-                    }
-                }
-            } catch (IOException | GoogleAuthException e) {
-                Log.w(TAG, "Failed to get change events", e);
-            }
             return null;
         }
     }
